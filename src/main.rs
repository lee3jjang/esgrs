use std::thread;
use std::sync::mpsc;

use esgrs::hw::model::learning;
use esgrs::ts::{TermStructure, smith_wilson_ytm};

use std::fs::File;
use std::io::prelude::Read;
use yaml_rust::YamlLoader;
use log::{debug, error, info, trace, warn};


fn main() {

    // 1. Config
    let mut file = File::open("config.yaml").unwrap();
    let mut config_str = String::new();
    file.read_to_string(&mut config_str).unwrap();
    let config = &YamlLoader::load_from_str(&config_str).unwrap()[0];
    let base_yymm = config["baseYymm"].as_str().unwrap();
    let lr = config["learningRate"].as_f64().unwrap();
    let tol: f64 = config["tolerance"].as_f64().unwrap();
    
    // 2. Swaption
    let file = File::open("swaption.csv").unwrap();
    let swaption_vol_mkt = get_swaption_vol(base_yymm, file);
    // println!("{:?}", swaption_vol_mkt);
    
    // 3. Yield
    let file = File::open("yield.csv").unwrap();
    let ytm = get_ytm(base_yymm, file);
    
    // 4. Logging
    log4rs::init_file("log4rs.yaml", Default::default()).unwrap();
    
    let alpha = 0.1;
    let tenor = vec![0.25, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0, 4.0, 5.0, 7.0, 10.0, 15.0, 20.0, 30.0, 50.0];
    let ytm = Vec::from(ytm);
    let ltfr = ytm[ytm.len()-1];
    let freq = 2.0;
    let alpha = 0.1;

    let p = smith_wilson_ytm(ltfr, alpha, tenor, ytm, freq);
    // println!("{:?}", p);

    // let (tx, rx) = mpsc::channel();
    // // let tx1 = tx.clone();

    // let mut handles = vec![];

    // let handle = thread::spawn(move || {
    //     let ts = TermStructure {
    //         p: [1.0, 0.999552127, 0.9991027, 0.99865182, 0.99802697, 0.997401479, 0.996775431, 0.995686933, 0.994599687, 0.993513739, 0.992514919, 0.991517188, 0.990520598, 0.989248367, 0.987978364, 0.986710621, 0.985445168, 0.984182034, 0.982921251, 0.981490076, 0.980061922, 0.978636806, 0.977214744, 0.97579575, 0.974379842, 0.972994948, 0.971613071, 0.970234228, 0.968858436, 0.967485714, 0.966116079, 0.964654306, 0.963195992, 0.961741146, 0.960289779, 0.958841899, 0.957397516, 0.955764934, 0.954136547, 0.952512352, 0.950892342, 0.949276512, 0.947664856, 0.94605737, 0.944454049, 0.942854887, 0.94125988, 0.939669022, 0.938082309, 0.936248264, 0.934419247, 0.932595232, 0.930776197, 0.928962116, 0.927152967, 0.925348726, 0.92354937, 0.921754876, 0.919965221, 0.918180382, 0.916400336, 0.9144553, 0.912515615, 0.910581246, 0.908652159, 0.906728318, 0.904809689, 0.902896239, 0.900987932, 0.899084736, 0.897186617, 0.895293542, 0.893405478, 0.891522393, 0.889644254, 0.887771029, 0.885902686, 0.884039194, 0.882180521, 0.880326636, 0.878477508, 0.876633106, 0.8747934, 0.87295836, 0.871127956, 0.869351773, 0.867579991, 0.865812583, 0.864049524, 0.862290791, 0.860536356, 0.858786197, 0.857040287, 0.855298604, 0.853561122, 0.851827817, 0.850098666, 0.848373646, 0.846652732, 0.8449359, 0.843223129, 0.841514395, 0.839809675, 0.838108946, 0.836412185, 0.834719371, 0.833030482, 0.831345494, 0.829664386, 0.827987136, 0.826313723, 0.824644125, 0.822978321, 0.821316289, 0.819658009, 0.818003459, 0.816352619, 0.814705467, 0.813061984, 0.81142215, 0.809785943, 0.808152993, 0.806523632, 0.804897841, 0.803275598, 0.801656885, 0.800041682, 0.79842997, 0.796821728, 0.795216939, 0.793615583, 0.792017641, 0.790423094, 0.788831923, 0.787244111, 0.785659638, 0.784078486, 0.782500636, 0.780926071, 0.779354773, 0.777786723, 0.776221904, 0.774660297, 0.773101886, 0.771546653, 0.76999458, 0.76844565, 0.766899845, 0.765357149, 0.763817544, 0.762281013, 0.76074754, 0.759217108, 0.757689699, 0.756165298, 0.754643888, 0.753125451, 0.751609973, 0.750097437, 0.748587826, 0.747081124, 0.745577315, 0.744076384, 0.742578314, 0.74108309, 0.739590695, 0.738101115, 0.736614334, 0.735130335, 0.733649104, 0.732170626, 0.730694884, 0.729221864, 0.727751551, 0.72628393, 0.724818984, 0.723356701, 0.721897064, 0.720440058, 0.71898567, 0.717533884, 0.716223553, 0.714915303, 0.713609129, 0.712305029, 0.711002999, 0.709703035, 0.708405133, 0.70710929, 0.705815502, 0.704523765, 0.703234076, 0.701946431, 0.700660826, 0.699377258, 0.698095722, 0.696816215, 0.695538733, 0.694263272, 0.692989829, 0.6917184, 0.69044898, 0.689181567, 0.687916155, 0.686652742, 0.685391323, 0.684131895, 0.682874454, 0.681618995, 0.680365514, 0.679114009, 0.677864475, 0.676616907, 0.675371303, 0.674127657, 0.672885967, 0.671646227, 0.670408435, 0.669172585, 0.667938675, 0.666706699, 0.665476654, 0.664248536, 0.663022341, 0.661798065, 0.660575703, 0.659355252, 0.658136706, 0.656920064, 0.655705319, 0.654492468, 0.653281507, 0.652072432, 0.650865239, 0.649659922, 0.648456479, 0.647254905, 0.646055195, 0.644857346, 0.643661353, 0.642467213],
    //         f: [0.021712567, 0.021712567, 0.021712567, 0.021712567, 0.021716307, 0.021720006, 0.021723667, 0.021737327, 0.021750855, 0.021764251, 0.021775642, 0.021786919, 0.021798085, 0.021815217, 0.021832189, 0.021849002, 0.021865657, 0.021882155, 0.021898499, 0.02191853, 0.021938381, 0.021958051, 0.021977544, 0.02199686, 0.022016001, 0.022034339, 0.022052509, 0.022070513, 0.022088351, 0.022106027, 0.02212354, 0.022143069, 0.022162423, 0.022181603, 0.022200611, 0.022219448, 0.022238115, 0.02226106, 0.022283809, 0.022306363, 0.022328724, 0.022350892, 0.022372871, 0.02239466, 0.022416263, 0.022437679, 0.022458911, 0.02247996, 0.022500827, 0.022527539, 0.022554037, 0.022580322, 0.022606397, 0.022632262, 0.022657919, 0.02268337, 0.022708617, 0.02273366, 0.022758502, 0.022783144, 0.022807588, 0.022836056, 0.022864307, 0.022892343, 0.022920165, 0.022947774, 0.022975173, 0.023002363, 0.023029345, 0.023056122, 0.023082694, 0.023109063, 0.023135232, 0.0231612, 0.02318697, 0.023212544, 0.023237923, 0.023263107, 0.0232881, 0.023312902, 0.023337515, 0.023361941, 0.02338618, 0.023410234, 0.023434105, 0.02345646, 0.023478642, 0.023500652, 0.02352249, 0.02354416, 0.023565661, 0.023586995, 0.023608163, 0.023629168, 0.023650009, 0.023670689, 0.023691208, 0.023711568, 0.02373177, 0.023751816, 0.023771706, 0.023791442, 0.023811026, 0.023830457, 0.023849739, 0.02386887, 0.023887854, 0.023906691, 0.023925382, 0.023943929, 0.023962332, 0.023980593, 0.023998713, 0.024016693, 0.024034534, 0.024052238, 0.024069805, 0.024087236, 0.024104534, 0.024121698, 0.024138729, 0.02415564, 0.024172421, 0.024189073, 0.024205597, 0.024221994, 0.024238265, 0.024254412, 0.024270434, 0.024286334, 0.024302112, 0.024317769, 0.024333306, 0.024348725, 0.024364026, 0.02437921, 0.024394278, 0.024409231, 0.024424071, 0.024438797, 0.024453411, 0.024467915, 0.024482308, 0.024496592, 0.024510767, 0.024524836, 0.024538797, 0.024552654, 0.024566405, 0.024580053, 0.024593598, 0.024607041, 0.024620382, 0.024633624, 0.024646766, 0.024659809, 0.024672755, 0.024685604, 0.024698357, 0.024711014, 0.024723577, 0.024736047, 0.024748424, 0.024760709, 0.024772902, 0.024785006, 0.02479702, 0.024808945, 0.024820782, 0.024832532, 0.024844195, 0.024855773, 0.024867266, 0.024878675, 0.02489, 0.024901243, 0.024912404, 0.024923483, 0.024934482, 0.024945402, 0.024956242, 0.024962181, 0.024968073, 0.024973918, 0.024979716, 0.024985469, 0.024991176, 0.024996839, 0.025002456, 0.025008029, 0.025013558, 0.025019044, 0.025024486, 0.025029886, 0.025035243, 0.025040559, 0.025045832, 0.025051065, 0.025056256, 0.025061407, 0.025066518, 0.025071589, 0.02507662, 0.025081613, 0.025086566, 0.025091482, 0.025096359, 0.025101198, 0.025106, 0.025110765, 0.025115493, 0.025120185, 0.025124841, 0.025129461, 0.025134046, 0.025138595, 0.02514311, 0.025147591, 0.025152037, 0.02515645, 0.025160828, 0.025165174, 0.025169487, 0.025173767, 0.025178015, 0.025182231, 0.025186416, 0.025190568, 0.02519469, 0.025198781, 0.025202842, 0.025206872, 0.025210872, 0.025214842, 0.025218783, 0.025222695, 0.025226578, 0.025230433, 0.025234259, 0.025238057, 0.025241827],
    //     };
    //     let swaption_vol_mkt = [0.26262, 0.28121, 0.28225, 0.30577, 0.31995, 0.33023, 0.26618, 0.27413, 0.27828, 0.29579, 0.29490, 0.30248, 0.26884, 0.27203, 0.27452, 0.27520, 0.27837, 0.29058, 0.28975, 0.26223, 0.25894, 0.25493, 0.26005, 0.29098, 0.26690, 0.23610, 0.23770, 0.24340, 0.27050, 0.31410, 0.24840, 0.23920, 0.25440, 0.33380, 0.33970, 0.32120];
    //     let p0 = [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01];
    //     let lr = 1e-2;
    //     let tol = 1e-15;
    //     let p = learning(ts, swaption_vol_mkt, p0, lr, tol);
    //     tx.send(p).unwrap();
    // });
    // handles.push(handle);

    // for handle in handles {
    //     handle.join().unwrap();  
    // }

    // for received in rx {
    //     println!("{:?}", received);
    // }

}

fn get_swaption_vol(base_yymm: &str, file: File) -> [f64; 36] {
    let mut rdr = csv::Reader::from_reader(file);
    let mut swaption_vol_mkt = [0.0; 36];
    for result in rdr.records() {
        let record = &result.unwrap();
        if &record[0] == base_yymm {
            for i in 0..36 {
                swaption_vol_mkt[i] = record[i+1].parse::<f64>().unwrap();
            }
        }
    }
    swaption_vol_mkt
}

fn get_ytm(base_yymm: &str, file: File) -> [f64; 16] {
    let mut rdr = csv::Reader::from_reader(file);
    let mut ytm = [0.0; 16];
    for result in rdr.records() {
        let record = &result.unwrap();
        if &record[0] == base_yymm {
            for i in 0..16 {
                ytm[i] = record[i+1].parse::<f64>().unwrap_or_default();
            }
        }
    }
    ytm
}