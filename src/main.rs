use esgrs::hw::node::*;



fn main() {

    let ts = TermStructure {
        p: [1.0, 0.999552127, 0.9991027, 0.99865182, 0.99802697, 0.997401479, 0.996775431, 0.995686933, 0.994599687, 0.993513739, 0.992514919, 0.991517188, 0.990520598, 0.989248367, 0.987978364, 0.986710621, 0.985445168, 0.984182034, 0.982921251, 0.981490076, 0.980061922, 0.978636806, 0.977214744, 0.97579575, 0.974379842, 0.972994948, 0.971613071, 0.970234228, 0.968858436, 0.967485714, 0.966116079, 0.964654306, 0.963195992, 0.961741146, 0.960289779, 0.958841899, 0.957397516, 0.955764934, 0.954136547, 0.952512352, 0.950892342, 0.949276512, 0.947664856, 0.94605737, 0.944454049, 0.942854887, 0.94125988, 0.939669022, 0.938082309, 0.936248264, 0.934419247, 0.932595232, 0.930776197, 0.928962116, 0.927152967, 0.925348726, 0.92354937, 0.921754876, 0.919965221, 0.918180382, 0.916400336, 0.9144553, 0.912515615, 0.910581246, 0.908652159, 0.906728318, 0.904809689, 0.902896239, 0.900987932, 0.899084736, 0.897186617, 0.895293542, 0.893405478, 0.891522393, 0.889644254, 0.887771029, 0.885902686, 0.884039194, 0.882180521, 0.880326636, 0.878477508, 0.876633106, 0.8747934, 0.87295836, 0.871127956, 0.869351773, 0.867579991, 0.865812583, 0.864049524, 0.862290791, 0.860536356, 0.858786197, 0.857040287, 0.855298604, 0.853561122, 0.851827817, 0.850098666, 0.848373646, 0.846652732, 0.8449359, 0.843223129, 0.841514395, 0.839809675, 0.838108946, 0.836412185, 0.834719371, 0.833030482, 0.831345494, 0.829664386, 0.827987136, 0.826313723, 0.824644125, 0.822978321, 0.821316289, 0.819658009, 0.818003459, 0.816352619, 0.814705467, 0.813061984, 0.81142215, 0.809785943, 0.808152993, 0.806523632, 0.804897841, 0.803275598, 0.801656885, 0.800041682, 0.79842997, 0.796821728, 0.795216939, 0.793615583, 0.792017641, 0.790423094, 0.788831923, 0.787244111, 0.785659638, 0.784078486, 0.782500636, 0.780926071, 0.779354773, 0.777786723, 0.776221904, 0.774660297, 0.773101886, 0.771546653, 0.76999458, 0.76844565, 0.766899845, 0.765357149, 0.763817544, 0.762281013, 0.76074754, 0.759217108, 0.757689699, 0.756165298, 0.754643888, 0.753125451, 0.751609973, 0.750097437, 0.748587826, 0.747081124, 0.745577315, 0.744076384, 0.742578314, 0.74108309, 0.739590695, 0.738101115, 0.736614334, 0.735130335, 0.733649104, 0.732170626, 0.730694884, 0.729221864, 0.727751551, 0.72628393, 0.724818984, 0.723356701, 0.721897064, 0.720440058, 0.71898567, 0.717533884, 0.716223553, 0.714915303, 0.713609129, 0.712305029, 0.711002999, 0.709703035, 0.708405133, 0.70710929, 0.705815502, 0.704523765, 0.703234076, 0.701946431, 0.700660826, 0.699377258, 0.698095722, 0.696816215, 0.695538733, 0.694263272, 0.692989829, 0.6917184, 0.69044898, 0.689181567, 0.687916155, 0.686652742, 0.685391323, 0.684131895, 0.682874454, 0.681618995, 0.680365514, 0.679114009, 0.677864475, 0.676616907, 0.675371303, 0.674127657, 0.672885967, 0.671646227, 0.670408435, 0.669172585, 0.667938675, 0.666706699, 0.665476654, 0.664248536, 0.663022341, 0.661798065, 0.660575703, 0.659355252, 0.658136706, 0.656920064, 0.655705319, 0.654492468, 0.653281507, 0.652072432, 0.650865239, 0.649659922, 0.648456479, 0.647254905, 0.646055195, 0.644857346, 0.643661353, 0.642467213],
        f: [0.021712567, 0.021712567, 0.021712567, 0.021712567, 0.021716307, 0.021720006, 0.021723667, 0.021737327, 0.021750855, 0.021764251, 0.021775642, 0.021786919, 0.021798085, 0.021815217, 0.021832189, 0.021849002, 0.021865657, 0.021882155, 0.021898499, 0.02191853, 0.021938381, 0.021958051, 0.021977544, 0.02199686, 0.022016001, 0.022034339, 0.022052509, 0.022070513, 0.022088351, 0.022106027, 0.02212354, 0.022143069, 0.022162423, 0.022181603, 0.022200611, 0.022219448, 0.022238115, 0.02226106, 0.022283809, 0.022306363, 0.022328724, 0.022350892, 0.022372871, 0.02239466, 0.022416263, 0.022437679, 0.022458911, 0.02247996, 0.022500827, 0.022527539, 0.022554037, 0.022580322, 0.022606397, 0.022632262, 0.022657919, 0.02268337, 0.022708617, 0.02273366, 0.022758502, 0.022783144, 0.022807588, 0.022836056, 0.022864307, 0.022892343, 0.022920165, 0.022947774, 0.022975173, 0.023002363, 0.023029345, 0.023056122, 0.023082694, 0.023109063, 0.023135232, 0.0231612, 0.02318697, 0.023212544, 0.023237923, 0.023263107, 0.0232881, 0.023312902, 0.023337515, 0.023361941, 0.02338618, 0.023410234, 0.023434105, 0.02345646, 0.023478642, 0.023500652, 0.02352249, 0.02354416, 0.023565661, 0.023586995, 0.023608163, 0.023629168, 0.023650009, 0.023670689, 0.023691208, 0.023711568, 0.02373177, 0.023751816, 0.023771706, 0.023791442, 0.023811026, 0.023830457, 0.023849739, 0.02386887, 0.023887854, 0.023906691, 0.023925382, 0.023943929, 0.023962332, 0.023980593, 0.023998713, 0.024016693, 0.024034534, 0.024052238, 0.024069805, 0.024087236, 0.024104534, 0.024121698, 0.024138729, 0.02415564, 0.024172421, 0.024189073, 0.024205597, 0.024221994, 0.024238265, 0.024254412, 0.024270434, 0.024286334, 0.024302112, 0.024317769, 0.024333306, 0.024348725, 0.024364026, 0.02437921, 0.024394278, 0.024409231, 0.024424071, 0.024438797, 0.024453411, 0.024467915, 0.024482308, 0.024496592, 0.024510767, 0.024524836, 0.024538797, 0.024552654, 0.024566405, 0.024580053, 0.024593598, 0.024607041, 0.024620382, 0.024633624, 0.024646766, 0.024659809, 0.024672755, 0.024685604, 0.024698357, 0.024711014, 0.024723577, 0.024736047, 0.024748424, 0.024760709, 0.024772902, 0.024785006, 0.02479702, 0.024808945, 0.024820782, 0.024832532, 0.024844195, 0.024855773, 0.024867266, 0.024878675, 0.02489, 0.024901243, 0.024912404, 0.024923483, 0.024934482, 0.024945402, 0.024956242, 0.024962181, 0.024968073, 0.024973918, 0.024979716, 0.024985469, 0.024991176, 0.024996839, 0.025002456, 0.025008029, 0.025013558, 0.025019044, 0.025024486, 0.025029886, 0.025035243, 0.025040559, 0.025045832, 0.025051065, 0.025056256, 0.025061407, 0.025066518, 0.025071589, 0.02507662, 0.025081613, 0.025086566, 0.025091482, 0.025096359, 0.025101198, 0.025106, 0.025110765, 0.025115493, 0.025120185, 0.025124841, 0.025129461, 0.025134046, 0.025138595, 0.02514311, 0.025147591, 0.025152037, 0.02515645, 0.025160828, 0.025165174, 0.025169487, 0.025173767, 0.025178015, 0.025182231, 0.025186416, 0.025190568, 0.02519469, 0.025198781, 0.025202842, 0.025206872, 0.025210872, 0.025214842, 0.025218783, 0.025222695, 0.025226578, 0.025230433, 0.025234259, 0.025238057, 0.025241827],
        df: [0.0, -6.91453E-07, -1.38107E-06, -2.0689E-06, -2.82902E-06, -3.58618E-06, -4.34046E-06, -5.29189E-06, -6.23767E-06, -7.17786E-06, -8.07484E-06, -8.96684E-06, -9.85393E-06, -1.08593E-05, -1.18585E-05, -1.28513E-05, -1.38381E-05, -1.48187E-05, -1.57932E-05, -1.68411E-05, -1.78823E-05, -1.89167E-05, -1.99444E-05, -2.09656E-05, -2.19802E-05, -2.29751E-05, -2.39636E-05, -2.49459E-05, -2.5922E-05, -2.6892E-05, -2.78559E-05, -2.88604E-05, -2.98584E-05, -3.08501E-05, -3.18354E-05, -3.28143E-05, -3.37871E-05, -3.48507E-05, -3.59072E-05, -3.69567E-05, -3.79994E-05, -3.90351E-05, -4.0064E-05, -4.1086E-05, -4.21013E-05, -4.31099E-05, -4.41118E-05, -4.51071E-05, -4.60958E-05, -4.72144E-05, -4.83254E-05, -4.9429E-05, -5.0525E-05, -5.16136E-05, -5.26948E-05, -5.37687E-05, -5.48352E-05, -5.58944E-05, -5.69464E-05, -5.79911E-05, -5.90287E-05, -6.01584E-05, -6.12803E-05, -6.23945E-05, -6.3501E-05, -6.45999E-05, -6.56911E-05, -6.67746E-05, -6.78507E-05, -6.89191E-05, -6.99801E-05, -7.10335E-05, -7.20795E-05, -7.31181E-05, -7.41493E-05, -7.51731E-05, -7.61896E-05, -7.71988E-05, -7.82007E-05, -7.91954E-05, -8.01829E-05, -8.11632E-05, -8.21364E-05, -8.31024E-05, -8.40614E-05, -8.49798E-05, -8.58914E-05, -8.67962E-05, -8.76943E-05, -8.85858E-05, -8.94706E-05, -9.03489E-05, -9.12205E-05, -9.20857E-05, -9.29443E-05, -9.37964E-05, -9.46422E-05, -9.54815E-05, -9.63144E-05, -9.71411E-05, -9.79614E-05, -9.87755E-05, -9.95833E-05, -0.000100385, -0.00010118, -0.00010197, -0.000102753, -0.00010353, -0.000104301, -0.000105066, -0.000105826, -0.000106579, -0.000107326, -0.000108068, -0.000108803, -0.000109533, -0.000110257, -0.000110976, -0.000111688, -0.000112395, -0.000113097, -0.000113793, -0.000114483, -0.000115168, -0.000115847, -0.000116521, -0.00011719, -0.000117853, -0.00011851, -0.000119163, -0.00011981, -0.000120451, -0.000121088, -0.000121719, -0.000122345, -0.000122966, -0.000123581, -0.000124192, -0.000124797, -0.000125398, -0.000125993, -0.000126584, -0.000127169, -0.00012775, -0.000128325, -0.000128896, -0.000129462, -0.000130023, -0.000130579, -0.000131131, -0.000131677, -0.000132219, -0.000132757, -0.00013329, -0.000133818, -0.000134341, -0.00013486, -0.000135375, -0.000135885, -0.00013639, -0.000136891, -0.000137388, -0.00013788, -0.000138368, -0.000138851, -0.00013933, -0.000139805, -0.000140275, -0.000140742, -0.000141204, -0.000141662, -0.000142115, -0.000142565, -0.00014301, -0.000143451, -0.000143889, -0.000144322, -0.000144751, -0.000145176, -0.000145597, -0.000146015, -0.000146288, -0.000146558, -0.000146827, -0.000147092, -0.000147356, -0.000147617, -0.000147875, -0.000148131, -0.000148385, -0.000148636, -0.000148885, -0.000149132, -0.000149376, -0.000149619, -0.000149859, -0.000150096, -0.000150332, -0.000150565, -0.000150796, -0.000151025, -0.000151251, -0.000151476, -0.000151698, -0.000151919, -0.000152137, -0.000152353, -0.000152567, -0.000152779, -0.000152989, -0.000153196, -0.000153402, -0.000153606, -0.000153808, -0.000154008, -0.000154206, -0.000154402, -0.000154596, -0.000154788, -0.000154978, -0.000155166, -0.000155353, -0.000155538, -0.00015572, -0.000155901, -0.00015608, -0.000156258, -0.000156433, -0.000156607, -0.000156779, -0.000156949, -0.000157117, -0.000157284, -0.000157449, -0.000157612, -0.000157773, -0.000157933, -0.000158091, -0.000158248, -0.000158403, -0.000158556],
    };

    let swaption_vol_mkt = [
        [0.26262, 0.28121, 0.28225, 0.30577, 0.31995, 0.33023],
        [0.26618, 0.27413, 0.27828, 0.29579, 0.29490, 0.30248],
        [0.26884, 0.27203, 0.27452, 0.27520, 0.27837, 0.29058],
        [0.28975, 0.26223, 0.25894, 0.25493, 0.26005, 0.29098],
        [0.26690, 0.23610, 0.23770, 0.24340, 0.27050, 0.31410],
        [0.24840, 0.23920, 0.25440, 0.33380, 0.33970, 0.32120],
    ];

    let mut mat: f64;
    let lr = 1e-6;

    fn fswap(t: f64, tenor: f64, ts: TermStructure) -> f64 {
        let mut denom = 0.0;
        let mut s = t + 0.25;
        while s <= t+tenor {
            denom += ts.p[(12.0*s) as usize];
            s += 0.25;
        }
        (ts.p[(12.0*t) as usize]-ts.p[(12.0*(t+tenor)) as usize])/denom/0.25
    }

    use esgrs::stats::norm_cdf;
    fn pswaption_black(mat: f64, tenor: f64, black_vol: f64, ts: TermStructure) -> f64 {
        let term1 = ts.p[(12.0*mat) as usize] - ts.p[(12.0*(mat+tenor)) as usize];
        let d1 = 0.5*black_vol*f64::sqrt(mat);
        let cum_prob = norm_cdf(d1);
        return term1*(2.0*cum_prob-1.0)/0.25;
    }

    let mut pswaption_mkt = [[0.0; 6]; 6];
    let mat_tenor = [1.0, 2.0, 3.0, 5.0, 7.0, 10.0];
    for i in 0..6 {
        for j in 0..6 {
            pswaption_mkt[i][j] = pswaption_black(mat_tenor[i], mat_tenor[j], swaption_vol_mkt[i][j], ts);
        }
    }

    // let params = [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01];
    let params = [0.0001, 0.0257805177740151, 0.0220240360585928, 0.01871070685577449, 0.025384040029662124, 0.018243153398688223, 0.01526385486030873];
    let mut alpha = params[0];
    let mut sigma1 = params[1];
    let mut sigma2 = params[2];
    let mut sigma3 = params[3];
    let mut sigma5 = params[4];
    let mut sigma7 = params[5];
    let mut sigma10 = params[6];

    // let mut alpha = 0.12049981326464214;
    // let mut sigma1 = 0.028334619475756304;
    // let mut sigma2 = 0.021979378932184726;
    // let mut sigma3 = 0.015676639260533694;
    // let mut sigma5 = 0.017496990061379867;
    // let mut sigma7 = 0.014653673743172198;
    // let mut sigma10 = 0.010025498885837395;
    

    for _ in 0..100000 {

        // 1. Modeling
        // 1.1. Option Maturity 1
        mat = 1.0;
        let fswap_m1_t1 = fswap(mat, 1.0, ts);
        let fswap_m1_t2 = fswap(mat, 2.0, ts);
        let fswap_m1_t3 = fswap(mat, 3.0, ts);
        let fswap_m1_t5 = fswap(mat, 5.0, ts);
        let fswap_m1_t7 = fswap(mat, 7.0, ts);
        let fswap_m1_t10 = fswap(mat, 10.0, ts);

        // 1.1.1. Layer 1
        let mut l1_m1_vr = Vr::new(mat);
        let mut l1_m1_b = [B::new(0.0, 0.0); 40];
        for i in 0..40 {
            l1_m1_b[i] = B::new(mat, mat+0.25+0.25*(i as f64));
        }
        
        // 1.1.2. Layer 2
        let mut l2_m1_a = [A::new(0.0, 0.0, ts); 40];
        let mut l2_m1_vp = [Vp::new(); 40];
        for i in 0..40 {
            l2_m1_a[i] = A::new(mat, mat+0.25+0.25*(i as f64), ts);
        }
        
        // 1.1.3. Layer 3
        let mut l3_m1_t1_rstar = RstarT1::new(fswap_m1_t1);
        let mut l3_m1_t2_rstar = RstarT2::new(fswap_m1_t2);
        let mut l3_m1_t3_rstar = RstarT3::new(fswap_m1_t3);
        let mut l3_m1_t5_rstar = RstarT5::new(fswap_m1_t5);
        let mut l3_m1_t7_rstar = RstarT7::new(fswap_m1_t7);
        let mut l3_m1_t10_rstar = RstarT10::new(fswap_m1_t10);
        
        // 1.1.4. Layer 4
        let mut l4_m1_t1_pswaption = PSwaptionT1::new(mat, fswap_m1_t1, ts);
        let mut l4_m1_t2_pswaption = PSwaptionT2::new(mat, fswap_m1_t2, ts);
        let mut l4_m1_t3_pswaption = PSwaptionT3::new(mat, fswap_m1_t3, ts);
        let mut l4_m1_t5_pswaption = PSwaptionT5::new(mat, fswap_m1_t5, ts);
        let mut l4_m1_t7_pswaption = PSwaptionT7::new(mat, fswap_m1_t7, ts);
        let mut l4_m1_t10_pswaption = PSwaptionT10::new(mat, fswap_m1_t10, ts);
        

        // 1.2. Option Maturity 2
        mat = 2.0;
        let fswap_m2_t1 = fswap(mat, 1.0, ts);
        let fswap_m2_t2 = fswap(mat, 2.0, ts);
        let fswap_m2_t3 = fswap(mat, 3.0, ts);
        let fswap_m2_t5 = fswap(mat, 5.0, ts);
        let fswap_m2_t7 = fswap(mat, 7.0, ts);
        let fswap_m2_t10 = fswap(mat, 10.0, ts);

        // 1.2.1. Layer 1
        let mut l1_m2_vr = Vr::new(mat);
        let mut l1_m2_b = [B::new(0.0, 0.0); 40];
        for i in 0..40 {
            l1_m2_b[i] = B::new(mat, mat+0.25+0.25*(i as f64));
        }
        
        // 1.2.2. Layer 2
        let mut l2_m2_a = [A::new(0.0, 0.0, ts); 40];
        let mut l2_m2_vp = [Vp::new(); 40];
        for i in 0..40 {
            l2_m2_a[i] = A::new(mat, mat+0.25+0.25*(i as f64), ts);
        }
        
        // 1.2.3. Layer 3
        let mut l3_m2_t1_rstar = RstarT1::new(fswap_m2_t1);
        let mut l3_m2_t2_rstar = RstarT2::new(fswap_m2_t2);
        let mut l3_m2_t3_rstar = RstarT3::new(fswap_m2_t3);
        let mut l3_m2_t5_rstar = RstarT5::new(fswap_m2_t5);
        let mut l3_m2_t7_rstar = RstarT7::new(fswap_m2_t7);
        let mut l3_m2_t10_rstar = RstarT10::new(fswap_m2_t10);
        
        // 1.2.4. Layer 4
        let mut l4_m2_t1_pswaption = PSwaptionT1::new(mat, fswap_m2_t1, ts);
        let mut l4_m2_t2_pswaption = PSwaptionT2::new(mat, fswap_m2_t2, ts);
        let mut l4_m2_t3_pswaption = PSwaptionT3::new(mat, fswap_m2_t3, ts);
        let mut l4_m2_t5_pswaption = PSwaptionT5::new(mat, fswap_m2_t5, ts);
        let mut l4_m2_t7_pswaption = PSwaptionT7::new(mat, fswap_m2_t7, ts);
        let mut l4_m2_t10_pswaption = PSwaptionT10::new(mat, fswap_m2_t10, ts);


        // 1.3. Option Maturity 3
        mat = 3.0;
        let fswap_m3_t1 = fswap(mat, 1.0, ts);
        let fswap_m3_t2 = fswap(mat, 2.0, ts);
        let fswap_m3_t3 = fswap(mat, 3.0, ts);
        let fswap_m3_t5 = fswap(mat, 5.0, ts);
        let fswap_m3_t7 = fswap(mat, 7.0, ts);
        let fswap_m3_t10 = fswap(mat, 10.0, ts);

        // 1.3.1. Layer 1
        let mut l1_m3_vr = Vr::new(mat);
        let mut l1_m3_b = [B::new(0.0, 0.0); 40];
        for i in 0..40 {
            l1_m3_b[i] = B::new(mat, mat+0.25+0.25*(i as f64));
        }
        
        // 1.3.2. Layer 2
        let mut l2_m3_a = [A::new(0.0, 0.0, ts); 40];
        let mut l2_m3_vp = [Vp::new(); 40];
        for i in 0..40 {
            l2_m3_a[i] = A::new(mat, mat+0.25+0.25*(i as f64), ts);
        }
        
        // 1.3.3. Layer 3
        let mut l3_m3_t1_rstar = RstarT1::new(fswap_m3_t1);
        let mut l3_m3_t2_rstar = RstarT2::new(fswap_m3_t2);
        let mut l3_m3_t3_rstar = RstarT3::new(fswap_m3_t3);
        let mut l3_m3_t5_rstar = RstarT5::new(fswap_m3_t5);
        let mut l3_m3_t7_rstar = RstarT7::new(fswap_m3_t7);
        let mut l3_m3_t10_rstar = RstarT10::new(fswap_m3_t10);
        
        // 1.3.4. Layer 4
        let mut l4_m3_t1_pswaption = PSwaptionT1::new(mat, fswap_m3_t1, ts);
        let mut l4_m3_t2_pswaption = PSwaptionT2::new(mat, fswap_m3_t2, ts);
        let mut l4_m3_t3_pswaption = PSwaptionT3::new(mat, fswap_m3_t3, ts);
        let mut l4_m3_t5_pswaption = PSwaptionT5::new(mat, fswap_m3_t5, ts);
        let mut l4_m3_t7_pswaption = PSwaptionT7::new(mat, fswap_m3_t7, ts);
        let mut l4_m3_t10_pswaption = PSwaptionT10::new(mat, fswap_m3_t10, ts);

        // 1.4. Option Maturity 5
        mat = 5.0;
        let fswap_m5_t1 = fswap(mat, 1.0, ts);
        let fswap_m5_t2 = fswap(mat, 2.0, ts);
        let fswap_m5_t3 = fswap(mat, 3.0, ts);
        let fswap_m5_t5 = fswap(mat, 5.0, ts);
        let fswap_m5_t7 = fswap(mat, 7.0, ts);
        let fswap_m5_t10 = fswap(mat, 10.0, ts);

        // 1.4.1. Layer 1
        let mut l1_m5_vr = Vr::new(mat);
        let mut l1_m5_b = [B::new(0.0, 0.0); 40];
        for i in 0..40 {
            l1_m5_b[i] = B::new(mat, mat+0.25+0.25*(i as f64));
        }
        
        // 1.4.2. Layer 2
        let mut l2_m5_a = [A::new(0.0, 0.0, ts); 40];
        let mut l2_m5_vp = [Vp::new(); 40];
        for i in 0..40 {
            l2_m5_a[i] = A::new(mat, mat+0.25+0.25*(i as f64), ts);
        }
        
        // 1.4.3. Layer 3
        let mut l3_m5_t1_rstar = RstarT1::new(fswap_m5_t1);
        let mut l3_m5_t2_rstar = RstarT2::new(fswap_m5_t2);
        let mut l3_m5_t3_rstar = RstarT3::new(fswap_m5_t3);
        let mut l3_m5_t5_rstar = RstarT5::new(fswap_m5_t5);
        let mut l3_m5_t7_rstar = RstarT7::new(fswap_m5_t7);
        let mut l3_m5_t10_rstar = RstarT10::new(fswap_m5_t10);
        
        // 1.4.4. Layer 4
        let mut l4_m5_t1_pswaption = PSwaptionT1::new(mat, fswap_m5_t1, ts);
        let mut l4_m5_t2_pswaption = PSwaptionT2::new(mat, fswap_m5_t2, ts);
        let mut l4_m5_t3_pswaption = PSwaptionT3::new(mat, fswap_m5_t3, ts);
        let mut l4_m5_t5_pswaption = PSwaptionT5::new(mat, fswap_m5_t5, ts);
        let mut l4_m5_t7_pswaption = PSwaptionT7::new(mat, fswap_m5_t7, ts);
        let mut l4_m5_t10_pswaption = PSwaptionT10::new(mat, fswap_m5_t10, ts);


        // 1.5. Option Maturity 7
        mat = 7.0;
        let fswap_m7_t1 = fswap(mat, 1.0, ts);
        let fswap_m7_t2 = fswap(mat, 2.0, ts);
        let fswap_m7_t3 = fswap(mat, 3.0, ts);
        let fswap_m7_t5 = fswap(mat, 5.0, ts);
        let fswap_m7_t7 = fswap(mat, 7.0, ts);
        let fswap_m7_t10 = fswap(mat, 10.0, ts);

        // 1.5.1. Layer 1
        let mut l1_m7_vr = Vr::new(mat);
        let mut l1_m7_b = [B::new(0.0, 0.0); 40];
        for i in 0..40 {
            l1_m7_b[i] = B::new(mat, mat+0.25+0.25*(i as f64));
        }
        
        // 1.5.2. Layer 2
        let mut l2_m7_a = [A::new(0.0, 0.0, ts); 40];
        let mut l2_m7_vp = [Vp::new(); 40];
        for i in 0..40 {
            l2_m7_a[i] = A::new(mat, mat+0.25+0.25*(i as f64), ts);
        }
        
        // 1.5.3. Layer 3
        let mut l3_m7_t1_rstar = RstarT1::new(fswap_m7_t1);
        let mut l3_m7_t2_rstar = RstarT2::new(fswap_m7_t2);
        let mut l3_m7_t3_rstar = RstarT3::new(fswap_m7_t3);
        let mut l3_m7_t5_rstar = RstarT5::new(fswap_m7_t5);
        let mut l3_m7_t7_rstar = RstarT7::new(fswap_m7_t7);
        let mut l3_m7_t10_rstar = RstarT10::new(fswap_m7_t10);
        
        // 1.5.4. Layer 4
        let mut l4_m7_t1_pswaption = PSwaptionT1::new(mat, fswap_m7_t1, ts);
        let mut l4_m7_t2_pswaption = PSwaptionT2::new(mat, fswap_m7_t2, ts);
        let mut l4_m7_t3_pswaption = PSwaptionT3::new(mat, fswap_m7_t3, ts);
        let mut l4_m7_t5_pswaption = PSwaptionT5::new(mat, fswap_m7_t5, ts);
        let mut l4_m7_t7_pswaption = PSwaptionT7::new(mat, fswap_m7_t7, ts);
        let mut l4_m7_t10_pswaption = PSwaptionT10::new(mat, fswap_m7_t10, ts);


        // 1.6. Option Maturity 10
        mat = 10.0;
        let fswap_m10_t1 = fswap(mat, 1.0, ts);
        let fswap_m10_t2 = fswap(mat, 2.0, ts);
        let fswap_m10_t3 = fswap(mat, 3.0, ts);
        let fswap_m10_t5 = fswap(mat, 5.0, ts);
        let fswap_m10_t7 = fswap(mat, 7.0, ts);
        let fswap_m10_t10 = fswap(mat, 10.0, ts);

        // 1.6.1. Layer 1
        let mut l1_m10_vr = Vr::new(mat);
        let mut l1_m10_b = [B::new(0.0, 0.0); 40];
        for i in 0..40 {
            l1_m10_b[i] = B::new(mat, mat+0.25+0.25*(i as f64));
        }
        
        // 1.6.2. Layer 2
        let mut l2_m10_a = [A::new(0.0, 0.0, ts); 40];
        let mut l2_m10_vp = [Vp::new(); 40];
        for i in 0..40 {
            l2_m10_a[i] = A::new(mat, mat+0.25+0.25*(i as f64), ts);
        }
        
        // 1.6.3. Layer 3
        let mut l3_m10_t1_rstar = RstarT1::new(fswap_m10_t1);
        let mut l3_m10_t2_rstar = RstarT2::new(fswap_m10_t2);
        let mut l3_m10_t3_rstar = RstarT3::new(fswap_m10_t3);
        let mut l3_m10_t5_rstar = RstarT5::new(fswap_m10_t5);
        let mut l3_m10_t7_rstar = RstarT7::new(fswap_m10_t7);
        let mut l3_m10_t10_rstar = RstarT10::new(fswap_m10_t10);
        
        // 1.6.4. Layer 4
        let mut l4_m10_t1_pswaption = PSwaptionT1::new(mat, fswap_m10_t1, ts);
        let mut l4_m10_t2_pswaption = PSwaptionT2::new(mat, fswap_m10_t2, ts);
        let mut l4_m10_t3_pswaption = PSwaptionT3::new(mat, fswap_m10_t3, ts);
        let mut l4_m10_t5_pswaption = PSwaptionT5::new(mat, fswap_m10_t5, ts);
        let mut l4_m10_t7_pswaption = PSwaptionT7::new(mat, fswap_m10_t7, ts);
        let mut l4_m10_t10_pswaption = PSwaptionT10::new(mat, fswap_m10_t10, ts);

        // 1.7. Layer 5
        let mut l5_mrse = MRSE::new(pswaption_mkt);
        let mut l5_mrae = MRAE::new(pswaption_mkt);



        // 2. Feedforward       
        // 2.1. Option Maturity 1
        // 2.1.1. Layer 1
        let mut m1_b = [0.0; 40];
        for i in 0..40 {
            m1_b[i] = l1_m1_b[i].forward(alpha);
        }
        let m1_vr = l1_m1_vr.forward(alpha, sigma1, sigma2, sigma3, sigma5, sigma7, sigma10);
        
        // 2.1.2. Layer 2
        let mut m1_a = [0.0; 40];
        let mut m1_vp = [0.0; 40];
        for i in 0..40 {
            m1_a[i] = l2_m1_a[i].forward(m1_b[i], m1_vr);
            m1_vp[i] = l2_m1_vp[i].forward(m1_b[i], m1_vr);
        }
        
        // 2.1.3. Layer 3
        let m1_t1_rstar = l3_m1_t1_rstar.forward(
            [m1_a[0], m1_a[1], m1_a[2], m1_a[3]],
            [m1_b[0], m1_b[1], m1_b[2], m1_b[3]],
        );
        let m1_t2_rstar = l3_m1_t2_rstar.forward(
            [m1_a[0], m1_a[1], m1_a[2], m1_a[3], m1_a[4], m1_a[5], m1_a[6], m1_a[7]],
            [m1_b[0], m1_b[1], m1_b[2], m1_b[3], m1_b[4], m1_b[5], m1_b[6], m1_b[7]],
        );
        let m1_t3_rstar = l3_m1_t3_rstar.forward(
            [m1_a[0], m1_a[1], m1_a[2], m1_a[3], m1_a[4], m1_a[5], m1_a[6], m1_a[7], m1_a[8], m1_a[9], m1_a[10], m1_a[11]],
            [m1_b[0], m1_b[1], m1_b[2], m1_b[3], m1_b[4], m1_b[5], m1_b[6], m1_b[7], m1_b[8], m1_b[9], m1_b[10], m1_b[11]],
        );
        let m1_t5_rstar = l3_m1_t5_rstar.forward(
            [m1_a[0], m1_a[1], m1_a[2], m1_a[3], m1_a[4], m1_a[5], m1_a[6], m1_a[7], m1_a[8], m1_a[9], m1_a[10], m1_a[11], m1_a[12], m1_a[13], m1_a[14], m1_a[15], m1_a[16], m1_a[17], m1_a[18], m1_a[19]],
            [m1_b[0], m1_b[1], m1_b[2], m1_b[3], m1_b[4], m1_b[5], m1_b[6], m1_b[7], m1_b[8], m1_b[9], m1_b[10], m1_b[11], m1_b[12], m1_b[13], m1_b[14], m1_b[15], m1_b[16], m1_b[17], m1_b[18], m1_b[19]],
        );
        let m1_t7_rstar = l3_m1_t7_rstar.forward(
            [m1_a[0], m1_a[1], m1_a[2], m1_a[3], m1_a[4], m1_a[5], m1_a[6], m1_a[7], m1_a[8], m1_a[9], m1_a[10], m1_a[11], m1_a[12], m1_a[13], m1_a[14], m1_a[15], m1_a[16], m1_a[17], m1_a[18], m1_a[19], m1_a[20], m1_a[21], m1_a[22], m1_a[23], m1_a[24], m1_a[25], m1_a[26], m1_a[27]],
            [m1_b[0], m1_b[1], m1_b[2], m1_b[3], m1_b[4], m1_b[5], m1_b[6], m1_b[7], m1_b[8], m1_b[9], m1_b[10], m1_b[11], m1_b[12], m1_b[13], m1_b[14], m1_b[15], m1_b[16], m1_b[17], m1_b[18], m1_b[19], m1_b[20], m1_b[21], m1_b[22], m1_b[23], m1_b[24], m1_b[25], m1_b[26], m1_b[27]],
        );
        let m1_t10_rstar = l3_m1_t10_rstar.forward(
            [m1_a[0], m1_a[1], m1_a[2], m1_a[3], m1_a[4], m1_a[5], m1_a[6], m1_a[7], m1_a[8], m1_a[9], m1_a[10], m1_a[11], m1_a[12], m1_a[13], m1_a[14], m1_a[15], m1_a[16], m1_a[17], m1_a[18], m1_a[19], m1_a[20], m1_a[21], m1_a[22], m1_a[23], m1_a[24], m1_a[25], m1_a[26], m1_a[27], m1_a[28], m1_a[29], m1_a[30], m1_a[31], m1_a[32], m1_a[33], m1_a[34], m1_a[35], m1_a[36], m1_a[37], m1_a[38], m1_a[39]],
            [m1_b[0], m1_b[1], m1_b[2], m1_b[3], m1_b[4], m1_b[5], m1_b[6], m1_b[7], m1_b[8], m1_b[9], m1_b[10], m1_b[11], m1_b[12], m1_b[13], m1_b[14], m1_b[15], m1_b[16], m1_b[17], m1_b[18], m1_b[19], m1_b[20], m1_b[21], m1_b[22], m1_b[23], m1_b[24], m1_b[25], m1_b[26], m1_b[27], m1_b[28], m1_b[29], m1_b[30], m1_b[31], m1_b[32], m1_b[33], m1_b[34], m1_b[35], m1_b[36], m1_b[37], m1_b[38], m1_b[39]],
        );
        
        // 2.1.4. Layer 4
        let m1_t1_pswaption = l4_m1_t1_pswaption.forward(
            [m1_a[0], m1_a[1], m1_a[2], m1_a[3]],
            [m1_b[0], m1_b[1], m1_b[2], m1_b[3]],
            [m1_vp[0], m1_vp[1], m1_vp[2], m1_vp[3]],
            m1_t1_rstar,
        );
        let m1_t2_pswaption = l4_m1_t2_pswaption.forward(
            [m1_a[0], m1_a[1], m1_a[2], m1_a[3], m1_a[4], m1_a[5], m1_a[6], m1_a[7]],
            [m1_b[0], m1_b[1], m1_b[2], m1_b[3], m1_b[4], m1_b[5], m1_b[6], m1_b[7]],
            [m1_vp[0], m1_vp[1], m1_vp[2], m1_vp[3], m1_vp[4], m1_vp[5], m1_vp[6], m1_vp[7]],
            m1_t2_rstar,
        );
        let m1_t3_pswaption = l4_m1_t3_pswaption.forward(
            [m1_a[0], m1_a[1], m1_a[2], m1_a[3], m1_a[4], m1_a[5], m1_a[6], m1_a[7], m1_a[8], m1_a[9], m1_a[10], m1_a[11]],
            [m1_b[0], m1_b[1], m1_b[2], m1_b[3], m1_b[4], m1_b[5], m1_b[6], m1_b[7], m1_b[8], m1_b[9], m1_b[10], m1_b[11]],
            [m1_vp[0], m1_vp[1], m1_vp[2], m1_vp[3], m1_vp[4], m1_vp[5], m1_vp[6], m1_vp[7], m1_vp[8], m1_vp[9], m1_vp[10], m1_vp[11]],
            m1_t3_rstar,
        );
        let m1_t5_pswaption = l4_m1_t5_pswaption.forward(
            [m1_a[0], m1_a[1], m1_a[2], m1_a[3], m1_a[4], m1_a[5], m1_a[6], m1_a[7], m1_a[8], m1_a[9], m1_a[10], m1_a[11], m1_a[12], m1_a[13], m1_a[14], m1_a[15], m1_a[16], m1_a[17], m1_a[18], m1_a[19]],
            [m1_b[0], m1_b[1], m1_b[2], m1_b[3], m1_b[4], m1_b[5], m1_b[6], m1_b[7], m1_b[8], m1_b[9], m1_b[10], m1_b[11], m1_b[12], m1_b[13], m1_b[14], m1_b[15], m1_b[16], m1_b[17], m1_b[18], m1_b[19]],
            [m1_vp[0], m1_vp[1], m1_vp[2], m1_vp[3], m1_vp[4], m1_vp[5], m1_vp[6], m1_vp[7], m1_vp[8], m1_vp[9], m1_vp[10], m1_vp[11], m1_vp[12], m1_vp[13], m1_vp[14], m1_vp[15], m1_vp[16], m1_vp[17], m1_vp[18], m1_vp[19]],
            m1_t5_rstar,
        );
        let m1_t7_pswaption = l4_m1_t7_pswaption.forward(
            [m1_a[0], m1_a[1], m1_a[2], m1_a[3], m1_a[4], m1_a[5], m1_a[6], m1_a[7], m1_a[8], m1_a[9], m1_a[10], m1_a[11], m1_a[12], m1_a[13], m1_a[14], m1_a[15], m1_a[16], m1_a[17], m1_a[18], m1_a[19], m1_a[20], m1_a[21], m1_a[22], m1_a[23], m1_a[24], m1_a[25], m1_a[26], m1_a[27]],
            [m1_b[0], m1_b[1], m1_b[2], m1_b[3], m1_b[4], m1_b[5], m1_b[6], m1_b[7], m1_b[8], m1_b[9], m1_b[10], m1_b[11], m1_b[12], m1_b[13], m1_b[14], m1_b[15], m1_b[16], m1_b[17], m1_b[18], m1_b[19], m1_b[20], m1_b[21], m1_b[22], m1_b[23], m1_b[24], m1_b[25], m1_b[26], m1_b[27]],
            [m1_vp[0], m1_vp[1], m1_vp[2], m1_vp[3], m1_vp[4], m1_vp[5], m1_vp[6], m1_vp[7], m1_vp[8], m1_vp[9], m1_vp[10], m1_vp[11], m1_vp[12], m1_vp[13], m1_vp[14], m1_vp[15], m1_vp[16], m1_vp[17], m1_vp[18], m1_vp[19], m1_vp[20], m1_vp[21], m1_vp[22], m1_vp[23], m1_vp[24], m1_vp[25], m1_vp[26], m1_vp[27]],
            m1_t7_rstar,
        );
        let m1_t10_pswaption = l4_m1_t10_pswaption.forward(
            [m1_a[0], m1_a[1], m1_a[2], m1_a[3], m1_a[4], m1_a[5], m1_a[6], m1_a[7], m1_a[8], m1_a[9], m1_a[10], m1_a[11], m1_a[12], m1_a[13], m1_a[14], m1_a[15], m1_a[16], m1_a[17], m1_a[18], m1_a[19], m1_a[20], m1_a[21], m1_a[22], m1_a[23], m1_a[24], m1_a[25], m1_a[26], m1_a[27], m1_a[28], m1_a[29], m1_a[30], m1_a[31], m1_a[32], m1_a[33], m1_a[34], m1_a[35], m1_a[36], m1_a[37], m1_a[38], m1_a[39]],
            [m1_b[0], m1_b[1], m1_b[2], m1_b[3], m1_b[4], m1_b[5], m1_b[6], m1_b[7], m1_b[8], m1_b[9], m1_b[10], m1_b[11], m1_b[12], m1_b[13], m1_b[14], m1_b[15], m1_b[16], m1_b[17], m1_b[18], m1_b[19], m1_b[20], m1_b[21], m1_b[22], m1_b[23], m1_b[24], m1_b[25], m1_b[26], m1_b[27], m1_b[28], m1_b[29], m1_b[30], m1_b[31], m1_b[32], m1_b[33], m1_b[34], m1_b[35], m1_b[36], m1_b[37], m1_b[38], m1_b[39]],
            [m1_vp[0], m1_vp[1], m1_vp[2], m1_vp[3], m1_vp[4], m1_vp[5], m1_vp[6], m1_vp[7], m1_vp[8], m1_vp[9], m1_vp[10], m1_vp[11], m1_vp[12], m1_vp[13], m1_vp[14], m1_vp[15], m1_vp[16], m1_vp[17], m1_vp[18], m1_vp[19], m1_vp[20], m1_vp[21], m1_vp[22], m1_vp[23], m1_vp[24], m1_vp[25], m1_vp[26], m1_vp[27], m1_vp[28], m1_vp[29], m1_vp[30], m1_vp[31], m1_vp[32], m1_vp[33], m1_vp[34], m1_vp[35], m1_vp[36], m1_vp[37], m1_vp[38], m1_vp[39]],
            m1_t10_rstar,
        );

        // 2.2. Option Maturity 2
        // 2.2.1. Layer 1
        let mut m2_b = [0.0; 40];
        for i in 0..40 {
            m2_b[i] = l1_m2_b[i].forward(alpha);
        }
        let m2_vr = l1_m2_vr.forward(alpha, sigma1, sigma2, sigma3, sigma5, sigma7, sigma10);

        // 2.2.2. Layer 2
        let mut m2_a = [0.0; 40];
        let mut m2_vp = [0.0; 40];
        for i in 0..40 {
            m2_a[i] = l2_m2_a[i].forward(m2_b[i], m2_vr);
            m2_vp[i] = l2_m2_vp[i].forward(m2_b[i], m2_vr);
        }

        // 2.2.3. Layer 3
        let m2_t1_rstar = l3_m2_t1_rstar.forward(
            [m2_a[0], m2_a[1], m2_a[2], m2_a[3]],
            [m2_b[0], m2_b[1], m2_b[2], m2_b[3]],
        );
        let m2_t2_rstar = l3_m2_t2_rstar.forward(
            [m2_a[0], m2_a[1], m2_a[2], m2_a[3], m2_a[4], m2_a[5], m2_a[6], m2_a[7]],
            [m2_b[0], m2_b[1], m2_b[2], m2_b[3], m2_b[4], m2_b[5], m2_b[6], m2_b[7]],
        );
        let m2_t3_rstar = l3_m2_t3_rstar.forward(
            [m2_a[0], m2_a[1], m2_a[2], m2_a[3], m2_a[4], m2_a[5], m2_a[6], m2_a[7], m2_a[8], m2_a[9], m2_a[10], m2_a[11]],
            [m2_b[0], m2_b[1], m2_b[2], m2_b[3], m2_b[4], m2_b[5], m2_b[6], m2_b[7], m2_b[8], m2_b[9], m2_b[10], m2_b[11]],
        );
        let m2_t5_rstar = l3_m2_t5_rstar.forward(
            [m2_a[0], m2_a[1], m2_a[2], m2_a[3], m2_a[4], m2_a[5], m2_a[6], m2_a[7], m2_a[8], m2_a[9], m2_a[10], m2_a[11], m2_a[12], m2_a[13], m2_a[14], m2_a[15], m2_a[16], m2_a[17], m2_a[18], m2_a[19]],
            [m2_b[0], m2_b[1], m2_b[2], m2_b[3], m2_b[4], m2_b[5], m2_b[6], m2_b[7], m2_b[8], m2_b[9], m2_b[10], m2_b[11], m2_b[12], m2_b[13], m2_b[14], m2_b[15], m2_b[16], m2_b[17], m2_b[18], m2_b[19]],
        );
        let m2_t7_rstar = l3_m2_t7_rstar.forward(
            [m2_a[0], m2_a[1], m2_a[2], m2_a[3], m2_a[4], m2_a[5], m2_a[6], m2_a[7], m2_a[8], m2_a[9], m2_a[10], m2_a[11], m2_a[12], m2_a[13], m2_a[14], m2_a[15], m2_a[16], m2_a[17], m2_a[18], m2_a[19], m2_a[20], m2_a[21], m2_a[22], m2_a[23], m2_a[24], m2_a[25], m2_a[26], m2_a[27]],
            [m2_b[0], m2_b[1], m2_b[2], m2_b[3], m2_b[4], m2_b[5], m2_b[6], m2_b[7], m2_b[8], m2_b[9], m2_b[10], m2_b[11], m2_b[12], m2_b[13], m2_b[14], m2_b[15], m2_b[16], m2_b[17], m2_b[18], m2_b[19], m2_b[20], m2_b[21], m2_b[22], m2_b[23], m2_b[24], m2_b[25], m2_b[26], m2_b[27]],
        );
        let m2_t10_rstar = l3_m2_t10_rstar.forward(
            [m2_a[0], m2_a[1], m2_a[2], m2_a[3], m2_a[4], m2_a[5], m2_a[6], m2_a[7], m2_a[8], m2_a[9], m2_a[10], m2_a[11], m2_a[12], m2_a[13], m2_a[14], m2_a[15], m2_a[16], m2_a[17], m2_a[18], m2_a[19], m2_a[20], m2_a[21], m2_a[22], m2_a[23], m2_a[24], m2_a[25], m2_a[26], m2_a[27], m2_a[28], m2_a[29], m2_a[30], m2_a[31], m2_a[32], m2_a[33], m2_a[34], m2_a[35], m2_a[36], m2_a[37], m2_a[38], m2_a[39]],
            [m2_b[0], m2_b[1], m2_b[2], m2_b[3], m2_b[4], m2_b[5], m2_b[6], m2_b[7], m2_b[8], m2_b[9], m2_b[10], m2_b[11], m2_b[12], m2_b[13], m2_b[14], m2_b[15], m2_b[16], m2_b[17], m2_b[18], m2_b[19], m2_b[20], m2_b[21], m2_b[22], m2_b[23], m2_b[24], m2_b[25], m2_b[26], m2_b[27], m2_b[28], m2_b[29], m2_b[30], m2_b[31], m2_b[32], m2_b[33], m2_b[34], m2_b[35], m2_b[36], m2_b[37], m2_b[38], m2_b[39]],
        );

        // 2.2.4. Layer 4
        let m2_t1_pswaption = l4_m2_t1_pswaption.forward(
            [m2_a[0], m2_a[1], m2_a[2], m2_a[3]],
            [m2_b[0], m2_b[1], m2_b[2], m2_b[3]],
            [m2_vp[0], m2_vp[1], m2_vp[2], m2_vp[3]],
            m2_t1_rstar,
        );
        let m2_t2_pswaption = l4_m2_t2_pswaption.forward(
            [m2_a[0], m2_a[1], m2_a[2], m2_a[3], m2_a[4], m2_a[5], m2_a[6], m2_a[7]],
            [m2_b[0], m2_b[1], m2_b[2], m2_b[3], m2_b[4], m2_b[5], m2_b[6], m2_b[7]],
            [m2_vp[0], m2_vp[1], m2_vp[2], m2_vp[3], m2_vp[4], m2_vp[5], m2_vp[6], m2_vp[7]],
            m2_t2_rstar,
        );
        let m2_t3_pswaption = l4_m2_t3_pswaption.forward(
            [m2_a[0], m2_a[1], m2_a[2], m2_a[3], m2_a[4], m2_a[5], m2_a[6], m2_a[7], m2_a[8], m2_a[9], m2_a[10], m2_a[11]],
            [m2_b[0], m2_b[1], m2_b[2], m2_b[3], m2_b[4], m2_b[5], m2_b[6], m2_b[7], m2_b[8], m2_b[9], m2_b[10], m2_b[11]],
            [m2_vp[0], m2_vp[1], m2_vp[2], m2_vp[3], m2_vp[4], m2_vp[5], m2_vp[6], m2_vp[7], m2_vp[8], m2_vp[9], m2_vp[10], m2_vp[11]],
            m2_t3_rstar,
        );
        let m2_t5_pswaption = l4_m2_t5_pswaption.forward(
            [m2_a[0], m2_a[1], m2_a[2], m2_a[3], m2_a[4], m2_a[5], m2_a[6], m2_a[7], m2_a[8], m2_a[9], m2_a[10], m2_a[11], m2_a[12], m2_a[13], m2_a[14], m2_a[15], m2_a[16], m2_a[17], m2_a[18], m2_a[19]],
            [m2_b[0], m2_b[1], m2_b[2], m2_b[3], m2_b[4], m2_b[5], m2_b[6], m2_b[7], m2_b[8], m2_b[9], m2_b[10], m2_b[11], m2_b[12], m2_b[13], m2_b[14], m2_b[15], m2_b[16], m2_b[17], m2_b[18], m2_b[19]],
            [m2_vp[0], m2_vp[1], m2_vp[2], m2_vp[3], m2_vp[4], m2_vp[5], m2_vp[6], m2_vp[7], m2_vp[8], m2_vp[9], m2_vp[10], m2_vp[11], m2_vp[12], m2_vp[13], m2_vp[14], m2_vp[15], m2_vp[16], m2_vp[17], m2_vp[18], m2_vp[19]],
            m2_t5_rstar,
        );
        let m2_t7_pswaption = l4_m2_t7_pswaption.forward(
            [m2_a[0], m2_a[1], m2_a[2], m2_a[3], m2_a[4], m2_a[5], m2_a[6], m2_a[7], m2_a[8], m2_a[9], m2_a[10], m2_a[11], m2_a[12], m2_a[13], m2_a[14], m2_a[15], m2_a[16], m2_a[17], m2_a[18], m2_a[19], m2_a[20], m2_a[21], m2_a[22], m2_a[23], m2_a[24], m2_a[25], m2_a[26], m2_a[27]],
            [m2_b[0], m2_b[1], m2_b[2], m2_b[3], m2_b[4], m2_b[5], m2_b[6], m2_b[7], m2_b[8], m2_b[9], m2_b[10], m2_b[11], m2_b[12], m2_b[13], m2_b[14], m2_b[15], m2_b[16], m2_b[17], m2_b[18], m2_b[19], m2_b[20], m2_b[21], m2_b[22], m2_b[23], m2_b[24], m2_b[25], m2_b[26], m2_b[27]],
            [m2_vp[0], m2_vp[1], m2_vp[2], m2_vp[3], m2_vp[4], m2_vp[5], m2_vp[6], m2_vp[7], m2_vp[8], m2_vp[9], m2_vp[10], m2_vp[11], m2_vp[12], m2_vp[13], m2_vp[14], m2_vp[15], m2_vp[16], m2_vp[17], m2_vp[18], m2_vp[19], m2_vp[20], m2_vp[21], m2_vp[22], m2_vp[23], m2_vp[24], m2_vp[25], m2_vp[26], m2_vp[27]],
            m2_t7_rstar,
        );
        let m2_t10_pswaption = l4_m2_t10_pswaption.forward(
            [m2_a[0], m2_a[1], m2_a[2], m2_a[3], m2_a[4], m2_a[5], m2_a[6], m2_a[7], m2_a[8], m2_a[9], m2_a[10], m2_a[11], m2_a[12], m2_a[13], m2_a[14], m2_a[15], m2_a[16], m2_a[17], m2_a[18], m2_a[19], m2_a[20], m2_a[21], m2_a[22], m2_a[23], m2_a[24], m2_a[25], m2_a[26], m2_a[27], m2_a[28], m2_a[29], m2_a[30], m2_a[31], m2_a[32], m2_a[33], m2_a[34], m2_a[35], m2_a[36], m2_a[37], m2_a[38], m2_a[39]],
            [m2_b[0], m2_b[1], m2_b[2], m2_b[3], m2_b[4], m2_b[5], m2_b[6], m2_b[7], m2_b[8], m2_b[9], m2_b[10], m2_b[11], m2_b[12], m2_b[13], m2_b[14], m2_b[15], m2_b[16], m2_b[17], m2_b[18], m2_b[19], m2_b[20], m2_b[21], m2_b[22], m2_b[23], m2_b[24], m2_b[25], m2_b[26], m2_b[27], m2_b[28], m2_b[29], m2_b[30], m2_b[31], m2_b[32], m2_b[33], m2_b[34], m2_b[35], m2_b[36], m2_b[37], m2_b[38], m2_b[39]],
            [m2_vp[0], m2_vp[1], m2_vp[2], m2_vp[3], m2_vp[4], m2_vp[5], m2_vp[6], m2_vp[7], m2_vp[8], m2_vp[9], m2_vp[10], m2_vp[11], m2_vp[12], m2_vp[13], m2_vp[14], m2_vp[15], m2_vp[16], m2_vp[17], m2_vp[18], m2_vp[19], m2_vp[20], m2_vp[21], m2_vp[22], m2_vp[23], m2_vp[24], m2_vp[25], m2_vp[26], m2_vp[27], m2_vp[28], m2_vp[29], m2_vp[30], m2_vp[31], m2_vp[32], m2_vp[33], m2_vp[34], m2_vp[35], m2_vp[36], m2_vp[37], m2_vp[38], m2_vp[39]],
            m2_t10_rstar,
        );

        // 2.3. Option Maturity 3
        // 2.3.1. Layer 1
        let mut m3_b = [0.0; 40];
        for i in 0..40 {
            m3_b[i] = l1_m3_b[i].forward(alpha);
        }
        let m3_vr = l1_m3_vr.forward(alpha, sigma1, sigma2, sigma3, sigma5, sigma7, sigma10);

        // 2.3.2. Layer 2
        let mut m3_a = [0.0; 40];
        let mut m3_vp = [0.0; 40];
        for i in 0..40 {
            m3_a[i] = l2_m3_a[i].forward(m3_b[i], m3_vr);
            m3_vp[i] = l2_m3_vp[i].forward(m3_b[i], m3_vr);
        }

        // 2.3.3. Layer 3
        let m3_t1_rstar = l3_m3_t1_rstar.forward(
            [m3_a[0], m3_a[1], m3_a[2], m3_a[3]],
            [m3_b[0], m3_b[1], m3_b[2], m3_b[3]],
        );
        let m3_t2_rstar = l3_m3_t2_rstar.forward(
            [m3_a[0], m3_a[1], m3_a[2], m3_a[3], m3_a[4], m3_a[5], m3_a[6], m3_a[7]],
            [m3_b[0], m3_b[1], m3_b[2], m3_b[3], m3_b[4], m3_b[5], m3_b[6], m3_b[7]],
        );
        let m3_t3_rstar = l3_m3_t3_rstar.forward(
            [m3_a[0], m3_a[1], m3_a[2], m3_a[3], m3_a[4], m3_a[5], m3_a[6], m3_a[7], m3_a[8], m3_a[9], m3_a[10], m3_a[11]],
            [m3_b[0], m3_b[1], m3_b[2], m3_b[3], m3_b[4], m3_b[5], m3_b[6], m3_b[7], m3_b[8], m3_b[9], m3_b[10], m3_b[11]],
        );
        let m3_t5_rstar = l3_m3_t5_rstar.forward(
            [m3_a[0], m3_a[1], m3_a[2], m3_a[3], m3_a[4], m3_a[5], m3_a[6], m3_a[7], m3_a[8], m3_a[9], m3_a[10], m3_a[11], m3_a[12], m3_a[13], m3_a[14], m3_a[15], m3_a[16], m3_a[17], m3_a[18], m3_a[19]],
            [m3_b[0], m3_b[1], m3_b[2], m3_b[3], m3_b[4], m3_b[5], m3_b[6], m3_b[7], m3_b[8], m3_b[9], m3_b[10], m3_b[11], m3_b[12], m3_b[13], m3_b[14], m3_b[15], m3_b[16], m3_b[17], m3_b[18], m3_b[19]],
        );
        let m3_t7_rstar = l3_m3_t7_rstar.forward(
            [m3_a[0], m3_a[1], m3_a[2], m3_a[3], m3_a[4], m3_a[5], m3_a[6], m3_a[7], m3_a[8], m3_a[9], m3_a[10], m3_a[11], m3_a[12], m3_a[13], m3_a[14], m3_a[15], m3_a[16], m3_a[17], m3_a[18], m3_a[19], m3_a[20], m3_a[21], m3_a[22], m3_a[23], m3_a[24], m3_a[25], m3_a[26], m3_a[27]],
            [m3_b[0], m3_b[1], m3_b[2], m3_b[3], m3_b[4], m3_b[5], m3_b[6], m3_b[7], m3_b[8], m3_b[9], m3_b[10], m3_b[11], m3_b[12], m3_b[13], m3_b[14], m3_b[15], m3_b[16], m3_b[17], m3_b[18], m3_b[19], m3_b[20], m3_b[21], m3_b[22], m3_b[23], m3_b[24], m3_b[25], m3_b[26], m3_b[27]],
        );
        let m3_t10_rstar = l3_m3_t10_rstar.forward(
            [m3_a[0], m3_a[1], m3_a[2], m3_a[3], m3_a[4], m3_a[5], m3_a[6], m3_a[7], m3_a[8], m3_a[9], m3_a[10], m3_a[11], m3_a[12], m3_a[13], m3_a[14], m3_a[15], m3_a[16], m3_a[17], m3_a[18], m3_a[19], m3_a[20], m3_a[21], m3_a[22], m3_a[23], m3_a[24], m3_a[25], m3_a[26], m3_a[27], m3_a[28], m3_a[29], m3_a[30], m3_a[31], m3_a[32], m3_a[33], m3_a[34], m3_a[35], m3_a[36], m3_a[37], m3_a[38], m3_a[39]],
            [m3_b[0], m3_b[1], m3_b[2], m3_b[3], m3_b[4], m3_b[5], m3_b[6], m3_b[7], m3_b[8], m3_b[9], m3_b[10], m3_b[11], m3_b[12], m3_b[13], m3_b[14], m3_b[15], m3_b[16], m3_b[17], m3_b[18], m3_b[19], m3_b[20], m3_b[21], m3_b[22], m3_b[23], m3_b[24], m3_b[25], m3_b[26], m3_b[27], m3_b[28], m3_b[29], m3_b[30], m3_b[31], m3_b[32], m3_b[33], m3_b[34], m3_b[35], m3_b[36], m3_b[37], m3_b[38], m3_b[39]],
        );

        // 2.3.4. Layer 4
        let m3_t1_pswaption = l4_m3_t1_pswaption.forward(
            [m3_a[0], m3_a[1], m3_a[2], m3_a[3]],
            [m3_b[0], m3_b[1], m3_b[2], m3_b[3]],
            [m3_vp[0], m3_vp[1], m3_vp[2], m3_vp[3]],
            m3_t1_rstar,
        );
        let m3_t2_pswaption = l4_m3_t2_pswaption.forward(
            [m3_a[0], m3_a[1], m3_a[2], m3_a[3], m3_a[4], m3_a[5], m3_a[6], m3_a[7]],
            [m3_b[0], m3_b[1], m3_b[2], m3_b[3], m3_b[4], m3_b[5], m3_b[6], m3_b[7]],
            [m3_vp[0], m3_vp[1], m3_vp[2], m3_vp[3], m3_vp[4], m3_vp[5], m3_vp[6], m3_vp[7]],
            m3_t2_rstar,
        );
        let m3_t3_pswaption = l4_m3_t3_pswaption.forward(
            [m3_a[0], m3_a[1], m3_a[2], m3_a[3], m3_a[4], m3_a[5], m3_a[6], m3_a[7], m3_a[8], m3_a[9], m3_a[10], m3_a[11]],
            [m3_b[0], m3_b[1], m3_b[2], m3_b[3], m3_b[4], m3_b[5], m3_b[6], m3_b[7], m3_b[8], m3_b[9], m3_b[10], m3_b[11]],
            [m3_vp[0], m3_vp[1], m3_vp[2], m3_vp[3], m3_vp[4], m3_vp[5], m3_vp[6], m3_vp[7], m3_vp[8], m3_vp[9], m3_vp[10], m3_vp[11]],
            m3_t3_rstar,
        );
        let m3_t5_pswaption = l4_m3_t5_pswaption.forward(
            [m3_a[0], m3_a[1], m3_a[2], m3_a[3], m3_a[4], m3_a[5], m3_a[6], m3_a[7], m3_a[8], m3_a[9], m3_a[10], m3_a[11], m3_a[12], m3_a[13], m3_a[14], m3_a[15], m3_a[16], m3_a[17], m3_a[18], m3_a[19]],
            [m3_b[0], m3_b[1], m3_b[2], m3_b[3], m3_b[4], m3_b[5], m3_b[6], m3_b[7], m3_b[8], m3_b[9], m3_b[10], m3_b[11], m3_b[12], m3_b[13], m3_b[14], m3_b[15], m3_b[16], m3_b[17], m3_b[18], m3_b[19]],
            [m3_vp[0], m3_vp[1], m3_vp[2], m3_vp[3], m3_vp[4], m3_vp[5], m3_vp[6], m3_vp[7], m3_vp[8], m3_vp[9], m3_vp[10], m3_vp[11], m3_vp[12], m3_vp[13], m3_vp[14], m3_vp[15], m3_vp[16], m3_vp[17], m3_vp[18], m3_vp[19]],
            m3_t5_rstar,
        );
        let m3_t7_pswaption = l4_m3_t7_pswaption.forward(
            [m3_a[0], m3_a[1], m3_a[2], m3_a[3], m3_a[4], m3_a[5], m3_a[6], m3_a[7], m3_a[8], m3_a[9], m3_a[10], m3_a[11], m3_a[12], m3_a[13], m3_a[14], m3_a[15], m3_a[16], m3_a[17], m3_a[18], m3_a[19], m3_a[20], m3_a[21], m3_a[22], m3_a[23], m3_a[24], m3_a[25], m3_a[26], m3_a[27]],
            [m3_b[0], m3_b[1], m3_b[2], m3_b[3], m3_b[4], m3_b[5], m3_b[6], m3_b[7], m3_b[8], m3_b[9], m3_b[10], m3_b[11], m3_b[12], m3_b[13], m3_b[14], m3_b[15], m3_b[16], m3_b[17], m3_b[18], m3_b[19], m3_b[20], m3_b[21], m3_b[22], m3_b[23], m3_b[24], m3_b[25], m3_b[26], m3_b[27]],
            [m3_vp[0], m3_vp[1], m3_vp[2], m3_vp[3], m3_vp[4], m3_vp[5], m3_vp[6], m3_vp[7], m3_vp[8], m3_vp[9], m3_vp[10], m3_vp[11], m3_vp[12], m3_vp[13], m3_vp[14], m3_vp[15], m3_vp[16], m3_vp[17], m3_vp[18], m3_vp[19], m3_vp[20], m3_vp[21], m3_vp[22], m3_vp[23], m3_vp[24], m3_vp[25], m3_vp[26], m3_vp[27]],
            m3_t7_rstar,
        );
        let m3_t10_pswaption = l4_m3_t10_pswaption.forward(
            [m3_a[0], m3_a[1], m3_a[2], m3_a[3], m3_a[4], m3_a[5], m3_a[6], m3_a[7], m3_a[8], m3_a[9], m3_a[10], m3_a[11], m3_a[12], m3_a[13], m3_a[14], m3_a[15], m3_a[16], m3_a[17], m3_a[18], m3_a[19], m3_a[20], m3_a[21], m3_a[22], m3_a[23], m3_a[24], m3_a[25], m3_a[26], m3_a[27], m3_a[28], m3_a[29], m3_a[30], m3_a[31], m3_a[32], m3_a[33], m3_a[34], m3_a[35], m3_a[36], m3_a[37], m3_a[38], m3_a[39]],
            [m3_b[0], m3_b[1], m3_b[2], m3_b[3], m3_b[4], m3_b[5], m3_b[6], m3_b[7], m3_b[8], m3_b[9], m3_b[10], m3_b[11], m3_b[12], m3_b[13], m3_b[14], m3_b[15], m3_b[16], m3_b[17], m3_b[18], m3_b[19], m3_b[20], m3_b[21], m3_b[22], m3_b[23], m3_b[24], m3_b[25], m3_b[26], m3_b[27], m3_b[28], m3_b[29], m3_b[30], m3_b[31], m3_b[32], m3_b[33], m3_b[34], m3_b[35], m3_b[36], m3_b[37], m3_b[38], m3_b[39]],
            [m3_vp[0], m3_vp[1], m3_vp[2], m3_vp[3], m3_vp[4], m3_vp[5], m3_vp[6], m3_vp[7], m3_vp[8], m3_vp[9], m3_vp[10], m3_vp[11], m3_vp[12], m3_vp[13], m3_vp[14], m3_vp[15], m3_vp[16], m3_vp[17], m3_vp[18], m3_vp[19], m3_vp[20], m3_vp[21], m3_vp[22], m3_vp[23], m3_vp[24], m3_vp[25], m3_vp[26], m3_vp[27], m3_vp[28], m3_vp[29], m3_vp[30], m3_vp[31], m3_vp[32], m3_vp[33], m3_vp[34], m3_vp[35], m3_vp[36], m3_vp[37], m3_vp[38], m3_vp[39]],
            m3_t10_rstar,
        );

        // 2.4. Option Maturity 5
        // 2.4.1. Layer 1
        let mut m5_b = [0.0; 40];
        for i in 0..40 {
            m5_b[i] = l1_m5_b[i].forward(alpha);
        }
        let m5_vr = l1_m5_vr.forward(alpha, sigma1, sigma2, sigma3, sigma5, sigma7, sigma10);

        // 2.4.2. Layer 2
        let mut m5_a = [0.0; 40];
        let mut m5_vp = [0.0; 40];
        for i in 0..40 {
            m5_a[i] = l2_m5_a[i].forward(m5_b[i], m5_vr);
            m5_vp[i] = l2_m5_vp[i].forward(m5_b[i], m5_vr);
        }

        // 2.4.3. Layer 3
        let m5_t1_rstar = l3_m5_t1_rstar.forward(
            [m5_a[0], m5_a[1], m5_a[2], m5_a[3]],
            [m5_b[0], m5_b[1], m5_b[2], m5_b[3]],
        );
        let m5_t2_rstar = l3_m5_t2_rstar.forward(
            [m5_a[0], m5_a[1], m5_a[2], m5_a[3], m5_a[4], m5_a[5], m5_a[6], m5_a[7]],
            [m5_b[0], m5_b[1], m5_b[2], m5_b[3], m5_b[4], m5_b[5], m5_b[6], m5_b[7]],
        );
        let m5_t3_rstar = l3_m5_t3_rstar.forward(
            [m5_a[0], m5_a[1], m5_a[2], m5_a[3], m5_a[4], m5_a[5], m5_a[6], m5_a[7], m5_a[8], m5_a[9], m5_a[10], m5_a[11]],
            [m5_b[0], m5_b[1], m5_b[2], m5_b[3], m5_b[4], m5_b[5], m5_b[6], m5_b[7], m5_b[8], m5_b[9], m5_b[10], m5_b[11]],
        );
        let m5_t5_rstar = l3_m5_t5_rstar.forward(
            [m5_a[0], m5_a[1], m5_a[2], m5_a[3], m5_a[4], m5_a[5], m5_a[6], m5_a[7], m5_a[8], m5_a[9], m5_a[10], m5_a[11], m5_a[12], m5_a[13], m5_a[14], m5_a[15], m5_a[16], m5_a[17], m5_a[18], m5_a[19]],
            [m5_b[0], m5_b[1], m5_b[2], m5_b[3], m5_b[4], m5_b[5], m5_b[6], m5_b[7], m5_b[8], m5_b[9], m5_b[10], m5_b[11], m5_b[12], m5_b[13], m5_b[14], m5_b[15], m5_b[16], m5_b[17], m5_b[18], m5_b[19]],
        );
        let m5_t7_rstar = l3_m5_t7_rstar.forward(
            [m5_a[0], m5_a[1], m5_a[2], m5_a[3], m5_a[4], m5_a[5], m5_a[6], m5_a[7], m5_a[8], m5_a[9], m5_a[10], m5_a[11], m5_a[12], m5_a[13], m5_a[14], m5_a[15], m5_a[16], m5_a[17], m5_a[18], m5_a[19], m5_a[20], m5_a[21], m5_a[22], m5_a[23], m5_a[24], m5_a[25], m5_a[26], m5_a[27]],
            [m5_b[0], m5_b[1], m5_b[2], m5_b[3], m5_b[4], m5_b[5], m5_b[6], m5_b[7], m5_b[8], m5_b[9], m5_b[10], m5_b[11], m5_b[12], m5_b[13], m5_b[14], m5_b[15], m5_b[16], m5_b[17], m5_b[18], m5_b[19], m5_b[20], m5_b[21], m5_b[22], m5_b[23], m5_b[24], m5_b[25], m5_b[26], m5_b[27]],
        );
        let m5_t10_rstar = l3_m5_t10_rstar.forward(
            [m5_a[0], m5_a[1], m5_a[2], m5_a[3], m5_a[4], m5_a[5], m5_a[6], m5_a[7], m5_a[8], m5_a[9], m5_a[10], m5_a[11], m5_a[12], m5_a[13], m5_a[14], m5_a[15], m5_a[16], m5_a[17], m5_a[18], m5_a[19], m5_a[20], m5_a[21], m5_a[22], m5_a[23], m5_a[24], m5_a[25], m5_a[26], m5_a[27], m5_a[28], m5_a[29], m5_a[30], m5_a[31], m5_a[32], m5_a[33], m5_a[34], m5_a[35], m5_a[36], m5_a[37], m5_a[38], m5_a[39]],
            [m5_b[0], m5_b[1], m5_b[2], m5_b[3], m5_b[4], m5_b[5], m5_b[6], m5_b[7], m5_b[8], m5_b[9], m5_b[10], m5_b[11], m5_b[12], m5_b[13], m5_b[14], m5_b[15], m5_b[16], m5_b[17], m5_b[18], m5_b[19], m5_b[20], m5_b[21], m5_b[22], m5_b[23], m5_b[24], m5_b[25], m5_b[26], m5_b[27], m5_b[28], m5_b[29], m5_b[30], m5_b[31], m5_b[32], m5_b[33], m5_b[34], m5_b[35], m5_b[36], m5_b[37], m5_b[38], m5_b[39]],
        );

        // 2.4.4. Layer 4
        let m5_t1_pswaption = l4_m5_t1_pswaption.forward(
            [m5_a[0], m5_a[1], m5_a[2], m5_a[3]],
            [m5_b[0], m5_b[1], m5_b[2], m5_b[3]],
            [m5_vp[0], m5_vp[1], m5_vp[2], m5_vp[3]],
            m5_t1_rstar,
        );
        let m5_t2_pswaption = l4_m5_t2_pswaption.forward(
            [m5_a[0], m5_a[1], m5_a[2], m5_a[3], m5_a[4], m5_a[5], m5_a[6], m5_a[7]],
            [m5_b[0], m5_b[1], m5_b[2], m5_b[3], m5_b[4], m5_b[5], m5_b[6], m5_b[7]],
            [m5_vp[0], m5_vp[1], m5_vp[2], m5_vp[3], m5_vp[4], m5_vp[5], m5_vp[6], m5_vp[7]],
            m5_t2_rstar,
        );
        let m5_t3_pswaption = l4_m5_t3_pswaption.forward(
            [m5_a[0], m5_a[1], m5_a[2], m5_a[3], m5_a[4], m5_a[5], m5_a[6], m5_a[7], m5_a[8], m5_a[9], m5_a[10], m5_a[11]],
            [m5_b[0], m5_b[1], m5_b[2], m5_b[3], m5_b[4], m5_b[5], m5_b[6], m5_b[7], m5_b[8], m5_b[9], m5_b[10], m5_b[11]],
            [m5_vp[0], m5_vp[1], m5_vp[2], m5_vp[3], m5_vp[4], m5_vp[5], m5_vp[6], m5_vp[7], m5_vp[8], m5_vp[9], m5_vp[10], m5_vp[11]],
            m5_t3_rstar,
        );
        let m5_t5_pswaption = l4_m5_t5_pswaption.forward(
            [m5_a[0], m5_a[1], m5_a[2], m5_a[3], m5_a[4], m5_a[5], m5_a[6], m5_a[7], m5_a[8], m5_a[9], m5_a[10], m5_a[11], m5_a[12], m5_a[13], m5_a[14], m5_a[15], m5_a[16], m5_a[17], m5_a[18], m5_a[19]],
            [m5_b[0], m5_b[1], m5_b[2], m5_b[3], m5_b[4], m5_b[5], m5_b[6], m5_b[7], m5_b[8], m5_b[9], m5_b[10], m5_b[11], m5_b[12], m5_b[13], m5_b[14], m5_b[15], m5_b[16], m5_b[17], m5_b[18], m5_b[19]],
            [m5_vp[0], m5_vp[1], m5_vp[2], m5_vp[3], m5_vp[4], m5_vp[5], m5_vp[6], m5_vp[7], m5_vp[8], m5_vp[9], m5_vp[10], m5_vp[11], m5_vp[12], m5_vp[13], m5_vp[14], m5_vp[15], m5_vp[16], m5_vp[17], m5_vp[18], m5_vp[19]],
            m5_t5_rstar,
        );
        let m5_t7_pswaption = l4_m5_t7_pswaption.forward(
            [m5_a[0], m5_a[1], m5_a[2], m5_a[3], m5_a[4], m5_a[5], m5_a[6], m5_a[7], m5_a[8], m5_a[9], m5_a[10], m5_a[11], m5_a[12], m5_a[13], m5_a[14], m5_a[15], m5_a[16], m5_a[17], m5_a[18], m5_a[19], m5_a[20], m5_a[21], m5_a[22], m5_a[23], m5_a[24], m5_a[25], m5_a[26], m5_a[27]],
            [m5_b[0], m5_b[1], m5_b[2], m5_b[3], m5_b[4], m5_b[5], m5_b[6], m5_b[7], m5_b[8], m5_b[9], m5_b[10], m5_b[11], m5_b[12], m5_b[13], m5_b[14], m5_b[15], m5_b[16], m5_b[17], m5_b[18], m5_b[19], m5_b[20], m5_b[21], m5_b[22], m5_b[23], m5_b[24], m5_b[25], m5_b[26], m5_b[27]],
            [m5_vp[0], m5_vp[1], m5_vp[2], m5_vp[3], m5_vp[4], m5_vp[5], m5_vp[6], m5_vp[7], m5_vp[8], m5_vp[9], m5_vp[10], m5_vp[11], m5_vp[12], m5_vp[13], m5_vp[14], m5_vp[15], m5_vp[16], m5_vp[17], m5_vp[18], m5_vp[19], m5_vp[20], m5_vp[21], m5_vp[22], m5_vp[23], m5_vp[24], m5_vp[25], m5_vp[26], m5_vp[27]],
            m5_t7_rstar,
        );
        let m5_t10_pswaption = l4_m5_t10_pswaption.forward(
            [m5_a[0], m5_a[1], m5_a[2], m5_a[3], m5_a[4], m5_a[5], m5_a[6], m5_a[7], m5_a[8], m5_a[9], m5_a[10], m5_a[11], m5_a[12], m5_a[13], m5_a[14], m5_a[15], m5_a[16], m5_a[17], m5_a[18], m5_a[19], m5_a[20], m5_a[21], m5_a[22], m5_a[23], m5_a[24], m5_a[25], m5_a[26], m5_a[27], m5_a[28], m5_a[29], m5_a[30], m5_a[31], m5_a[32], m5_a[33], m5_a[34], m5_a[35], m5_a[36], m5_a[37], m5_a[38], m5_a[39]],
            [m5_b[0], m5_b[1], m5_b[2], m5_b[3], m5_b[4], m5_b[5], m5_b[6], m5_b[7], m5_b[8], m5_b[9], m5_b[10], m5_b[11], m5_b[12], m5_b[13], m5_b[14], m5_b[15], m5_b[16], m5_b[17], m5_b[18], m5_b[19], m5_b[20], m5_b[21], m5_b[22], m5_b[23], m5_b[24], m5_b[25], m5_b[26], m5_b[27], m5_b[28], m5_b[29], m5_b[30], m5_b[31], m5_b[32], m5_b[33], m5_b[34], m5_b[35], m5_b[36], m5_b[37], m5_b[38], m5_b[39]],
            [m5_vp[0], m5_vp[1], m5_vp[2], m5_vp[3], m5_vp[4], m5_vp[5], m5_vp[6], m5_vp[7], m5_vp[8], m5_vp[9], m5_vp[10], m5_vp[11], m5_vp[12], m5_vp[13], m5_vp[14], m5_vp[15], m5_vp[16], m5_vp[17], m5_vp[18], m5_vp[19], m5_vp[20], m5_vp[21], m5_vp[22], m5_vp[23], m5_vp[24], m5_vp[25], m5_vp[26], m5_vp[27], m5_vp[28], m5_vp[29], m5_vp[30], m5_vp[31], m5_vp[32], m5_vp[33], m5_vp[34], m5_vp[35], m5_vp[36], m5_vp[37], m5_vp[38], m5_vp[39]],
            m5_t10_rstar,
        );

        // 2.5. Option Maturity 7
        // 2.5.1. Layer 1
        let mut m7_b = [0.0; 40];
        for i in 0..40 {
            m7_b[i] = l1_m7_b[i].forward(alpha);
        }
        let m7_vr = l1_m7_vr.forward(alpha, sigma1, sigma2, sigma3, sigma5, sigma7, sigma10);

        // 2.5.2. Layer 2
        let mut m7_a = [0.0; 40];
        let mut m7_vp = [0.0; 40];
        for i in 0..40 {
            m7_a[i] = l2_m7_a[i].forward(m7_b[i], m7_vr);
            m7_vp[i] = l2_m7_vp[i].forward(m7_b[i], m7_vr);
        }

        // 2.5.3. Layer 3
        let m7_t1_rstar = l3_m7_t1_rstar.forward(
            [m7_a[0], m7_a[1], m7_a[2], m7_a[3]],
            [m7_b[0], m7_b[1], m7_b[2], m7_b[3]],
        );
        let m7_t2_rstar = l3_m7_t2_rstar.forward(
            [m7_a[0], m7_a[1], m7_a[2], m7_a[3], m7_a[4], m7_a[5], m7_a[6], m7_a[7]],
            [m7_b[0], m7_b[1], m7_b[2], m7_b[3], m7_b[4], m7_b[5], m7_b[6], m7_b[7]],
        );
        let m7_t3_rstar = l3_m7_t3_rstar.forward(
            [m7_a[0], m7_a[1], m7_a[2], m7_a[3], m7_a[4], m7_a[5], m7_a[6], m7_a[7], m7_a[8], m7_a[9], m7_a[10], m7_a[11]],
            [m7_b[0], m7_b[1], m7_b[2], m7_b[3], m7_b[4], m7_b[5], m7_b[6], m7_b[7], m7_b[8], m7_b[9], m7_b[10], m7_b[11]],
        );
        let m7_t5_rstar = l3_m7_t5_rstar.forward(
            [m7_a[0], m7_a[1], m7_a[2], m7_a[3], m7_a[4], m7_a[5], m7_a[6], m7_a[7], m7_a[8], m7_a[9], m7_a[10], m7_a[11], m7_a[12], m7_a[13], m7_a[14], m7_a[15], m7_a[16], m7_a[17], m7_a[18], m7_a[19]],
            [m7_b[0], m7_b[1], m7_b[2], m7_b[3], m7_b[4], m7_b[5], m7_b[6], m7_b[7], m7_b[8], m7_b[9], m7_b[10], m7_b[11], m7_b[12], m7_b[13], m7_b[14], m7_b[15], m7_b[16], m7_b[17], m7_b[18], m7_b[19]],
        );
        let m7_t7_rstar = l3_m7_t7_rstar.forward(
            [m7_a[0], m7_a[1], m7_a[2], m7_a[3], m7_a[4], m7_a[5], m7_a[6], m7_a[7], m7_a[8], m7_a[9], m7_a[10], m7_a[11], m7_a[12], m7_a[13], m7_a[14], m7_a[15], m7_a[16], m7_a[17], m7_a[18], m7_a[19], m7_a[20], m7_a[21], m7_a[22], m7_a[23], m7_a[24], m7_a[25], m7_a[26], m7_a[27]],
            [m7_b[0], m7_b[1], m7_b[2], m7_b[3], m7_b[4], m7_b[5], m7_b[6], m7_b[7], m7_b[8], m7_b[9], m7_b[10], m7_b[11], m7_b[12], m7_b[13], m7_b[14], m7_b[15], m7_b[16], m7_b[17], m7_b[18], m7_b[19], m7_b[20], m7_b[21], m7_b[22], m7_b[23], m7_b[24], m7_b[25], m7_b[26], m7_b[27]],
        );
        let m7_t10_rstar = l3_m7_t10_rstar.forward(
            [m7_a[0], m7_a[1], m7_a[2], m7_a[3], m7_a[4], m7_a[5], m7_a[6], m7_a[7], m7_a[8], m7_a[9], m7_a[10], m7_a[11], m7_a[12], m7_a[13], m7_a[14], m7_a[15], m7_a[16], m7_a[17], m7_a[18], m7_a[19], m7_a[20], m7_a[21], m7_a[22], m7_a[23], m7_a[24], m7_a[25], m7_a[26], m7_a[27], m7_a[28], m7_a[29], m7_a[30], m7_a[31], m7_a[32], m7_a[33], m7_a[34], m7_a[35], m7_a[36], m7_a[37], m7_a[38], m7_a[39]],
            [m7_b[0], m7_b[1], m7_b[2], m7_b[3], m7_b[4], m7_b[5], m7_b[6], m7_b[7], m7_b[8], m7_b[9], m7_b[10], m7_b[11], m7_b[12], m7_b[13], m7_b[14], m7_b[15], m7_b[16], m7_b[17], m7_b[18], m7_b[19], m7_b[20], m7_b[21], m7_b[22], m7_b[23], m7_b[24], m7_b[25], m7_b[26], m7_b[27], m7_b[28], m7_b[29], m7_b[30], m7_b[31], m7_b[32], m7_b[33], m7_b[34], m7_b[35], m7_b[36], m7_b[37], m7_b[38], m7_b[39]],
        );

        // 2.5.4. Layer 4
        let m7_t1_pswaption = l4_m7_t1_pswaption.forward(
            [m7_a[0], m7_a[1], m7_a[2], m7_a[3]],
            [m7_b[0], m7_b[1], m7_b[2], m7_b[3]],
            [m7_vp[0], m7_vp[1], m7_vp[2], m7_vp[3]],
            m7_t1_rstar,
        );
        let m7_t2_pswaption = l4_m7_t2_pswaption.forward(
            [m7_a[0], m7_a[1], m7_a[2], m7_a[3], m7_a[4], m7_a[5], m7_a[6], m7_a[7]],
            [m7_b[0], m7_b[1], m7_b[2], m7_b[3], m7_b[4], m7_b[5], m7_b[6], m7_b[7]],
            [m7_vp[0], m7_vp[1], m7_vp[2], m7_vp[3], m7_vp[4], m7_vp[5], m7_vp[6], m7_vp[7]],
            m7_t2_rstar,
        );
        let m7_t3_pswaption = l4_m7_t3_pswaption.forward(
            [m7_a[0], m7_a[1], m7_a[2], m7_a[3], m7_a[4], m7_a[5], m7_a[6], m7_a[7], m7_a[8], m7_a[9], m7_a[10], m7_a[11]],
            [m7_b[0], m7_b[1], m7_b[2], m7_b[3], m7_b[4], m7_b[5], m7_b[6], m7_b[7], m7_b[8], m7_b[9], m7_b[10], m7_b[11]],
            [m7_vp[0], m7_vp[1], m7_vp[2], m7_vp[3], m7_vp[4], m7_vp[5], m7_vp[6], m7_vp[7], m7_vp[8], m7_vp[9], m7_vp[10], m7_vp[11]],
            m7_t3_rstar,
        );
        let m7_t5_pswaption = l4_m7_t5_pswaption.forward(
            [m7_a[0], m7_a[1], m7_a[2], m7_a[3], m7_a[4], m7_a[5], m7_a[6], m7_a[7], m7_a[8], m7_a[9], m7_a[10], m7_a[11], m7_a[12], m7_a[13], m7_a[14], m7_a[15], m7_a[16], m7_a[17], m7_a[18], m7_a[19]],
            [m7_b[0], m7_b[1], m7_b[2], m7_b[3], m7_b[4], m7_b[5], m7_b[6], m7_b[7], m7_b[8], m7_b[9], m7_b[10], m7_b[11], m7_b[12], m7_b[13], m7_b[14], m7_b[15], m7_b[16], m7_b[17], m7_b[18], m7_b[19]],
            [m7_vp[0], m7_vp[1], m7_vp[2], m7_vp[3], m7_vp[4], m7_vp[5], m7_vp[6], m7_vp[7], m7_vp[8], m7_vp[9], m7_vp[10], m7_vp[11], m7_vp[12], m7_vp[13], m7_vp[14], m7_vp[15], m7_vp[16], m7_vp[17], m7_vp[18], m7_vp[19]],
            m7_t5_rstar,
        );
        let m7_t7_pswaption = l4_m7_t7_pswaption.forward(
            [m7_a[0], m7_a[1], m7_a[2], m7_a[3], m7_a[4], m7_a[5], m7_a[6], m7_a[7], m7_a[8], m7_a[9], m7_a[10], m7_a[11], m7_a[12], m7_a[13], m7_a[14], m7_a[15], m7_a[16], m7_a[17], m7_a[18], m7_a[19], m7_a[20], m7_a[21], m7_a[22], m7_a[23], m7_a[24], m7_a[25], m7_a[26], m7_a[27]],
            [m7_b[0], m7_b[1], m7_b[2], m7_b[3], m7_b[4], m7_b[5], m7_b[6], m7_b[7], m7_b[8], m7_b[9], m7_b[10], m7_b[11], m7_b[12], m7_b[13], m7_b[14], m7_b[15], m7_b[16], m7_b[17], m7_b[18], m7_b[19], m7_b[20], m7_b[21], m7_b[22], m7_b[23], m7_b[24], m7_b[25], m7_b[26], m7_b[27]],
            [m7_vp[0], m7_vp[1], m7_vp[2], m7_vp[3], m7_vp[4], m7_vp[5], m7_vp[6], m7_vp[7], m7_vp[8], m7_vp[9], m7_vp[10], m7_vp[11], m7_vp[12], m7_vp[13], m7_vp[14], m7_vp[15], m7_vp[16], m7_vp[17], m7_vp[18], m7_vp[19], m7_vp[20], m7_vp[21], m7_vp[22], m7_vp[23], m7_vp[24], m7_vp[25], m7_vp[26], m7_vp[27]],
            m7_t7_rstar,
        );
        let m7_t10_pswaption = l4_m7_t10_pswaption.forward(
            [m7_a[0], m7_a[1], m7_a[2], m7_a[3], m7_a[4], m7_a[5], m7_a[6], m7_a[7], m7_a[8], m7_a[9], m7_a[10], m7_a[11], m7_a[12], m7_a[13], m7_a[14], m7_a[15], m7_a[16], m7_a[17], m7_a[18], m7_a[19], m7_a[20], m7_a[21], m7_a[22], m7_a[23], m7_a[24], m7_a[25], m7_a[26], m7_a[27], m7_a[28], m7_a[29], m7_a[30], m7_a[31], m7_a[32], m7_a[33], m7_a[34], m7_a[35], m7_a[36], m7_a[37], m7_a[38], m7_a[39]],
            [m7_b[0], m7_b[1], m7_b[2], m7_b[3], m7_b[4], m7_b[5], m7_b[6], m7_b[7], m7_b[8], m7_b[9], m7_b[10], m7_b[11], m7_b[12], m7_b[13], m7_b[14], m7_b[15], m7_b[16], m7_b[17], m7_b[18], m7_b[19], m7_b[20], m7_b[21], m7_b[22], m7_b[23], m7_b[24], m7_b[25], m7_b[26], m7_b[27], m7_b[28], m7_b[29], m7_b[30], m7_b[31], m7_b[32], m7_b[33], m7_b[34], m7_b[35], m7_b[36], m7_b[37], m7_b[38], m7_b[39]],
            [m7_vp[0], m7_vp[1], m7_vp[2], m7_vp[3], m7_vp[4], m7_vp[5], m7_vp[6], m7_vp[7], m7_vp[8], m7_vp[9], m7_vp[10], m7_vp[11], m7_vp[12], m7_vp[13], m7_vp[14], m7_vp[15], m7_vp[16], m7_vp[17], m7_vp[18], m7_vp[19], m7_vp[20], m7_vp[21], m7_vp[22], m7_vp[23], m7_vp[24], m7_vp[25], m7_vp[26], m7_vp[27], m7_vp[28], m7_vp[29], m7_vp[30], m7_vp[31], m7_vp[32], m7_vp[33], m7_vp[34], m7_vp[35], m7_vp[36], m7_vp[37], m7_vp[38], m7_vp[39]],
            m7_t10_rstar,
        );

        // 2.6. Option Maturity 10
        // 2.6.1. Layer 1
        let mut m10_b = [0.0; 40];
        for i in 0..40 {
            m10_b[i] = l1_m10_b[i].forward(alpha);
        }
        let m10_vr = l1_m10_vr.forward(alpha, sigma1, sigma2, sigma3, sigma5, sigma7, sigma10);

        // 2.6.2. Layer 2
        let mut m10_a = [0.0; 40];
        let mut m10_vp = [0.0; 40];
        for i in 0..40 {
            m10_a[i] = l2_m10_a[i].forward(m10_b[i], m10_vr);
            m10_vp[i] = l2_m10_vp[i].forward(m10_b[i], m10_vr);
        }

        // 2.6.3. Layer 3
        let m10_t1_rstar = l3_m10_t1_rstar.forward(
            [m10_a[0], m10_a[1], m10_a[2], m10_a[3]],
            [m10_b[0], m10_b[1], m10_b[2], m10_b[3]],
        );
        let m10_t2_rstar = l3_m10_t2_rstar.forward(
            [m10_a[0], m10_a[1], m10_a[2], m10_a[3], m10_a[4], m10_a[5], m10_a[6], m10_a[7]],
            [m10_b[0], m10_b[1], m10_b[2], m10_b[3], m10_b[4], m10_b[5], m10_b[6], m10_b[7]],
        );
        let m10_t3_rstar = l3_m10_t3_rstar.forward(
            [m10_a[0], m10_a[1], m10_a[2], m10_a[3], m10_a[4], m10_a[5], m10_a[6], m10_a[7], m10_a[8], m10_a[9], m10_a[10], m10_a[11]],
            [m10_b[0], m10_b[1], m10_b[2], m10_b[3], m10_b[4], m10_b[5], m10_b[6], m10_b[7], m10_b[8], m10_b[9], m10_b[10], m10_b[11]],
        );
        let m10_t5_rstar = l3_m10_t5_rstar.forward(
            [m10_a[0], m10_a[1], m10_a[2], m10_a[3], m10_a[4], m10_a[5], m10_a[6], m10_a[7], m10_a[8], m10_a[9], m10_a[10], m10_a[11], m10_a[12], m10_a[13], m10_a[14], m10_a[15], m10_a[16], m10_a[17], m10_a[18], m10_a[19]],
            [m10_b[0], m10_b[1], m10_b[2], m10_b[3], m10_b[4], m10_b[5], m10_b[6], m10_b[7], m10_b[8], m10_b[9], m10_b[10], m10_b[11], m10_b[12], m10_b[13], m10_b[14], m10_b[15], m10_b[16], m10_b[17], m10_b[18], m10_b[19]],
        );
        let m10_t7_rstar = l3_m10_t7_rstar.forward(
            [m10_a[0], m10_a[1], m10_a[2], m10_a[3], m10_a[4], m10_a[5], m10_a[6], m10_a[7], m10_a[8], m10_a[9], m10_a[10], m10_a[11], m10_a[12], m10_a[13], m10_a[14], m10_a[15], m10_a[16], m10_a[17], m10_a[18], m10_a[19], m10_a[20], m10_a[21], m10_a[22], m10_a[23], m10_a[24], m10_a[25], m10_a[26], m10_a[27]],
            [m10_b[0], m10_b[1], m10_b[2], m10_b[3], m10_b[4], m10_b[5], m10_b[6], m10_b[7], m10_b[8], m10_b[9], m10_b[10], m10_b[11], m10_b[12], m10_b[13], m10_b[14], m10_b[15], m10_b[16], m10_b[17], m10_b[18], m10_b[19], m10_b[20], m10_b[21], m10_b[22], m10_b[23], m10_b[24], m10_b[25], m10_b[26], m10_b[27]],
        );
        let m10_t10_rstar = l3_m10_t10_rstar.forward(
            [m10_a[0], m10_a[1], m10_a[2], m10_a[3], m10_a[4], m10_a[5], m10_a[6], m10_a[7], m10_a[8], m10_a[9], m10_a[10], m10_a[11], m10_a[12], m10_a[13], m10_a[14], m10_a[15], m10_a[16], m10_a[17], m10_a[18], m10_a[19], m10_a[20], m10_a[21], m10_a[22], m10_a[23], m10_a[24], m10_a[25], m10_a[26], m10_a[27], m10_a[28], m10_a[29], m10_a[30], m10_a[31], m10_a[32], m10_a[33], m10_a[34], m10_a[35], m10_a[36], m10_a[37], m10_a[38], m10_a[39]],
            [m10_b[0], m10_b[1], m10_b[2], m10_b[3], m10_b[4], m10_b[5], m10_b[6], m10_b[7], m10_b[8], m10_b[9], m10_b[10], m10_b[11], m10_b[12], m10_b[13], m10_b[14], m10_b[15], m10_b[16], m10_b[17], m10_b[18], m10_b[19], m10_b[20], m10_b[21], m10_b[22], m10_b[23], m10_b[24], m10_b[25], m10_b[26], m10_b[27], m10_b[28], m10_b[29], m10_b[30], m10_b[31], m10_b[32], m10_b[33], m10_b[34], m10_b[35], m10_b[36], m10_b[37], m10_b[38], m10_b[39]],
        );

        // 2.6.4. Layer 4
        let m10_t1_pswaption = l4_m10_t1_pswaption.forward(
            [m10_a[0], m10_a[1], m10_a[2], m10_a[3]],
            [m10_b[0], m10_b[1], m10_b[2], m10_b[3]],
            [m10_vp[0], m10_vp[1], m10_vp[2], m10_vp[3]],
            m10_t1_rstar,
        );
        let m10_t2_pswaption = l4_m10_t2_pswaption.forward(
            [m10_a[0], m10_a[1], m10_a[2], m10_a[3], m10_a[4], m10_a[5], m10_a[6], m10_a[7]],
            [m10_b[0], m10_b[1], m10_b[2], m10_b[3], m10_b[4], m10_b[5], m10_b[6], m10_b[7]],
            [m10_vp[0], m10_vp[1], m10_vp[2], m10_vp[3], m10_vp[4], m10_vp[5], m10_vp[6], m10_vp[7]],
            m10_t2_rstar,
        );
        let m10_t3_pswaption = l4_m10_t3_pswaption.forward(
            [m10_a[0], m10_a[1], m10_a[2], m10_a[3], m10_a[4], m10_a[5], m10_a[6], m10_a[7], m10_a[8], m10_a[9], m10_a[10], m10_a[11]],
            [m10_b[0], m10_b[1], m10_b[2], m10_b[3], m10_b[4], m10_b[5], m10_b[6], m10_b[7], m10_b[8], m10_b[9], m10_b[10], m10_b[11]],
            [m10_vp[0], m10_vp[1], m10_vp[2], m10_vp[3], m10_vp[4], m10_vp[5], m10_vp[6], m10_vp[7], m10_vp[8], m10_vp[9], m10_vp[10], m10_vp[11]],
            m10_t3_rstar,
        );
        let m10_t5_pswaption = l4_m10_t5_pswaption.forward(
            [m10_a[0], m10_a[1], m10_a[2], m10_a[3], m10_a[4], m10_a[5], m10_a[6], m10_a[7], m10_a[8], m10_a[9], m10_a[10], m10_a[11], m10_a[12], m10_a[13], m10_a[14], m10_a[15], m10_a[16], m10_a[17], m10_a[18], m10_a[19]],
            [m10_b[0], m10_b[1], m10_b[2], m10_b[3], m10_b[4], m10_b[5], m10_b[6], m10_b[7], m10_b[8], m10_b[9], m10_b[10], m10_b[11], m10_b[12], m10_b[13], m10_b[14], m10_b[15], m10_b[16], m10_b[17], m10_b[18], m10_b[19]],
            [m10_vp[0], m10_vp[1], m10_vp[2], m10_vp[3], m10_vp[4], m10_vp[5], m10_vp[6], m10_vp[7], m10_vp[8], m10_vp[9], m10_vp[10], m10_vp[11], m10_vp[12], m10_vp[13], m10_vp[14], m10_vp[15], m10_vp[16], m10_vp[17], m10_vp[18], m10_vp[19]],
            m10_t5_rstar,
        );
        let m10_t7_pswaption = l4_m10_t7_pswaption.forward(
            [m10_a[0], m10_a[1], m10_a[2], m10_a[3], m10_a[4], m10_a[5], m10_a[6], m10_a[7], m10_a[8], m10_a[9], m10_a[10], m10_a[11], m10_a[12], m10_a[13], m10_a[14], m10_a[15], m10_a[16], m10_a[17], m10_a[18], m10_a[19], m10_a[20], m10_a[21], m10_a[22], m10_a[23], m10_a[24], m10_a[25], m10_a[26], m10_a[27]],
            [m10_b[0], m10_b[1], m10_b[2], m10_b[3], m10_b[4], m10_b[5], m10_b[6], m10_b[7], m10_b[8], m10_b[9], m10_b[10], m10_b[11], m10_b[12], m10_b[13], m10_b[14], m10_b[15], m10_b[16], m10_b[17], m10_b[18], m10_b[19], m10_b[20], m10_b[21], m10_b[22], m10_b[23], m10_b[24], m10_b[25], m10_b[26], m10_b[27]],
            [m10_vp[0], m10_vp[1], m10_vp[2], m10_vp[3], m10_vp[4], m10_vp[5], m10_vp[6], m10_vp[7], m10_vp[8], m10_vp[9], m10_vp[10], m10_vp[11], m10_vp[12], m10_vp[13], m10_vp[14], m10_vp[15], m10_vp[16], m10_vp[17], m10_vp[18], m10_vp[19], m10_vp[20], m10_vp[21], m10_vp[22], m10_vp[23], m10_vp[24], m10_vp[25], m10_vp[26], m10_vp[27]],
            m10_t7_rstar,
        );
        let m10_t10_pswaption = l4_m10_t10_pswaption.forward(
            [m10_a[0], m10_a[1], m10_a[2], m10_a[3], m10_a[4], m10_a[5], m10_a[6], m10_a[7], m10_a[8], m10_a[9], m10_a[10], m10_a[11], m10_a[12], m10_a[13], m10_a[14], m10_a[15], m10_a[16], m10_a[17], m10_a[18], m10_a[19], m10_a[20], m10_a[21], m10_a[22], m10_a[23], m10_a[24], m10_a[25], m10_a[26], m10_a[27], m10_a[28], m10_a[29], m10_a[30], m10_a[31], m10_a[32], m10_a[33], m10_a[34], m10_a[35], m10_a[36], m10_a[37], m10_a[38], m10_a[39]],
            [m10_b[0], m10_b[1], m10_b[2], m10_b[3], m10_b[4], m10_b[5], m10_b[6], m10_b[7], m10_b[8], m10_b[9], m10_b[10], m10_b[11], m10_b[12], m10_b[13], m10_b[14], m10_b[15], m10_b[16], m10_b[17], m10_b[18], m10_b[19], m10_b[20], m10_b[21], m10_b[22], m10_b[23], m10_b[24], m10_b[25], m10_b[26], m10_b[27], m10_b[28], m10_b[29], m10_b[30], m10_b[31], m10_b[32], m10_b[33], m10_b[34], m10_b[35], m10_b[36], m10_b[37], m10_b[38], m10_b[39]],
            [m10_vp[0], m10_vp[1], m10_vp[2], m10_vp[3], m10_vp[4], m10_vp[5], m10_vp[6], m10_vp[7], m10_vp[8], m10_vp[9], m10_vp[10], m10_vp[11], m10_vp[12], m10_vp[13], m10_vp[14], m10_vp[15], m10_vp[16], m10_vp[17], m10_vp[18], m10_vp[19], m10_vp[20], m10_vp[21], m10_vp[22], m10_vp[23], m10_vp[24], m10_vp[25], m10_vp[26], m10_vp[27], m10_vp[28], m10_vp[29], m10_vp[30], m10_vp[31], m10_vp[32], m10_vp[33], m10_vp[34], m10_vp[35], m10_vp[36], m10_vp[37], m10_vp[38], m10_vp[39]],
            m10_t10_rstar,
        );
        

        // 2.7. Layer 5
        let pswaption_hw = [[m1_t1_pswaption, m1_t2_pswaption, m1_t3_pswaption, m1_t5_pswaption, m1_t7_pswaption, m1_t10_pswaption],
        [m2_t1_pswaption, m2_t2_pswaption, m2_t3_pswaption, m2_t5_pswaption, m2_t7_pswaption, m2_t10_pswaption],
        [m3_t1_pswaption, m3_t2_pswaption, m3_t3_pswaption, m3_t5_pswaption, m3_t7_pswaption, m3_t10_pswaption],
        [m5_t1_pswaption, m5_t2_pswaption, m5_t3_pswaption, m5_t5_pswaption, m5_t7_pswaption, m5_t10_pswaption],
        [m7_t1_pswaption, m7_t2_pswaption, m7_t3_pswaption, m7_t5_pswaption, m7_t7_pswaption, m7_t10_pswaption],
        [m10_t1_pswaption, m10_t2_pswaption, m10_t3_pswaption, m10_t5_pswaption, m10_t7_pswaption, m10_t10_pswaption]];

        let mrse = l5_mrse.forward(pswaption_hw);
        print!("MRSE: {:?}, ", mrse);
        let mrae = l5_mrae.forward(pswaption_hw);
        print!("MRAE: {:?}, ", mrae);
        
        
        // 3. Backpropagation
        let mut dalpha = 0.0;
        let mut dsigma1 = 0.0;
        let mut dsigma2 = 0.0;
        let mut dsigma3 = 0.0;
        let mut dsigma5 = 0.0;
        let mut dsigma7 = 0.0;
        let mut dsigma10 = 0.0;
        
        // 3.1. Layer 5 (OK)
        let l4_dpswaption = l5_mrse.backward(1.0);
        // let l4_dpswaption = l5_mrae.backward(1.0);

        // 3.2. Option Maturity 1
        // 3.2.1. Layer 4
        let (l3_m1_t1_da, l3_m1_t1_db, l3_m1_t1_dvp, l3_m1_t1_drstar) = l4_m1_t1_pswaption.backward(l4_dpswaption[0][0]);
        let (l3_m1_t2_da, l3_m1_t2_db, l3_m1_t2_dvp, l3_m1_t2_drstar) = l4_m1_t2_pswaption.backward(l4_dpswaption[0][1]);
        let (l3_m1_t3_da, l3_m1_t3_db, l3_m1_t3_dvp, l3_m1_t3_drstar) = l4_m1_t3_pswaption.backward(l4_dpswaption[0][2]);
        let (l3_m1_t5_da, l3_m1_t5_db, l3_m1_t5_dvp, l3_m1_t5_drstar) = l4_m1_t5_pswaption.backward(l4_dpswaption[0][3]);
        let (l3_m1_t7_da, l3_m1_t7_db, l3_m1_t7_dvp, l3_m1_t7_drstar) = l4_m1_t7_pswaption.backward(l4_dpswaption[0][4]);
        let (l3_m1_t10_da, l3_m1_t10_db, l3_m1_t10_dvp, l3_m1_t10_drstar) = l4_m1_t10_pswaption.backward(l4_dpswaption[0][5]);
        
        
        // 3.2.2. Layer 3 (OK)
        let (l2_m1_t1_da, l2_m1_t1_db) = l3_m1_t1_rstar.backward(l3_m1_t1_drstar);
        let (l2_m1_t2_da, l2_m1_t2_db) = l3_m1_t2_rstar.backward(l3_m1_t2_drstar);
        let (l2_m1_t3_da, l2_m1_t3_db) = l3_m1_t3_rstar.backward(l3_m1_t3_drstar);
        let (l2_m1_t5_da, l2_m1_t5_db) = l3_m1_t5_rstar.backward(l3_m1_t5_drstar);
        let (l2_m1_t7_da, l2_m1_t7_db) = l3_m1_t7_rstar.backward(l3_m1_t7_drstar);
        let (l2_m1_t10_da, l2_m1_t10_db) = l3_m1_t10_rstar.backward(l3_m1_t10_drstar);
        

        // 3.2.3. Layer 2
        let mut l2_m1_da = [0.0; 40];
        let mut l2_m1_dvp = [0.0; 40];
        let mut l1_m1_db = [0.0; 40];
        let mut l1_m1_dvr = 0.0;

        for i in 0..4 { l2_m1_da[i] += l2_m1_t1_da[i] + l3_m1_t1_da[i]; }
        for i in 0..8 { l2_m1_da[i] += l2_m1_t2_da[i] + l3_m1_t2_da[i]; }
        for i in 0..12 { l2_m1_da[i] += l2_m1_t3_da[i] + l3_m1_t3_da[i]; }
        for i in 0..20 { l2_m1_da[i] += l2_m1_t5_da[i] + l3_m1_t5_da[i]; }
        for i in 0..28 { l2_m1_da[i] += l2_m1_t7_da[i] + l3_m1_t7_da[i]; }
        for i in 0..40 { l2_m1_da[i] += l2_m1_t10_da[i] + l3_m1_t10_da[i]; }

        for i in 0..4 { l2_m1_dvp[i] += l3_m1_t1_dvp[i]; }
        for i in 0..8 { l2_m1_dvp[i] += l3_m1_t2_dvp[i]; }
        for i in 0..12 { l2_m1_dvp[i] += l3_m1_t3_dvp[i]; }
        for i in 0..20 { l2_m1_dvp[i] += l3_m1_t5_dvp[i]; }
        for i in 0..28 { l2_m1_dvp[i] += l3_m1_t7_dvp[i]; }
        for i in 0..40 { l2_m1_dvp[i] += l3_m1_t10_dvp[i]; }

        for i in 0..40 {
            let tmp = l2_m1_a[i].backward(l2_m1_da[i]);
            l1_m1_db[i] += tmp.0;
            l1_m1_dvr += tmp.1;
            let tmp = l2_m1_vp[i].backward(l2_m1_dvp[i]);
            l1_m1_db[i] += tmp.0;
            l1_m1_dvr += tmp.1;
        }

        // 3.2.4. Layer 1
        for i in 0..4 { l1_m1_db[i] += l2_m1_t1_db[i] + l3_m1_t1_db[i]; }
        for i in 0..8 { l1_m1_db[i] += l2_m1_t2_db[i] + l3_m1_t2_db[i]; }
        for i in 0..12 { l1_m1_db[i] += l2_m1_t3_db[i] + l3_m1_t3_db[i]; }
        for i in 0..20 { l1_m1_db[i] += l2_m1_t5_db[i] + l3_m1_t5_db[i]; }
        for i in 0..28 { l1_m1_db[i] += l2_m1_t7_db[i] + l3_m1_t7_db[i]; }
        for i in 0..40 { l1_m1_db[i] += l2_m1_t10_db[i] + l3_m1_t10_db[i]; }
        
        for i in 0..40 {
            dalpha += l1_m1_b[i].backward(l1_m1_db[i]);
        }
        let tmp = l1_m1_vr.backward(l1_m1_dvr);
        dalpha += tmp.0;
        dsigma1 += tmp.1;
        dsigma2 += tmp.2;
        dsigma3 += tmp.3;
        dsigma5 += tmp.4;
        dsigma7 += tmp.5;
        dsigma10 += tmp.6;

        // 3.3. Option Maturity 2
        // 3.3.1. Layer 4
        let (l3_m2_t1_da, l3_m2_t1_db, l3_m2_t1_dvp, l3_m2_t1_drstar) = l4_m2_t1_pswaption.backward(l4_dpswaption[1][0]);
        let (l3_m2_t2_da, l3_m2_t2_db, l3_m2_t2_dvp, l3_m2_t2_drstar) = l4_m2_t2_pswaption.backward(l4_dpswaption[1][1]);
        let (l3_m2_t3_da, l3_m2_t3_db, l3_m2_t3_dvp, l3_m2_t3_drstar) = l4_m2_t3_pswaption.backward(l4_dpswaption[1][2]);
        let (l3_m2_t5_da, l3_m2_t5_db, l3_m2_t5_dvp, l3_m2_t5_drstar) = l4_m2_t5_pswaption.backward(l4_dpswaption[1][3]);
        let (l3_m2_t7_da, l3_m2_t7_db, l3_m2_t7_dvp, l3_m2_t7_drstar) = l4_m2_t7_pswaption.backward(l4_dpswaption[1][4]);
        let (l3_m2_t10_da, l3_m2_t10_db, l3_m2_t10_dvp, l3_m2_t10_drstar) = l4_m2_t10_pswaption.backward(l4_dpswaption[1][5]);
        
        // 3.3.2. Layer 3
        let (l2_m2_t1_da, l2_m2_t1_db) = l3_m2_t1_rstar.backward(l3_m2_t1_drstar);
        let (l2_m2_t2_da, l2_m2_t2_db) = l3_m2_t2_rstar.backward(l3_m2_t2_drstar);
        let (l2_m2_t3_da, l2_m2_t3_db) = l3_m2_t3_rstar.backward(l3_m2_t3_drstar);
        let (l2_m2_t5_da, l2_m2_t5_db) = l3_m2_t5_rstar.backward(l3_m2_t5_drstar);
        let (l2_m2_t7_da, l2_m2_t7_db) = l3_m2_t7_rstar.backward(l3_m2_t7_drstar);
        let (l2_m2_t10_da, l2_m2_t10_db) = l3_m2_t10_rstar.backward(l3_m2_t10_drstar);

        // 3.3.3. Layer 2
        let mut l2_m2_da = [0.0; 40];
        let mut l2_m2_dvp = [0.0; 40];
        let mut l1_m2_db = [0.0; 40];
        let mut l1_m2_dvr = 0.0;

        for i in 0..4 { l2_m2_da[i] += l2_m2_t1_da[i] + l3_m2_t1_da[i]; }
        for i in 0..8 { l2_m2_da[i] += l2_m2_t2_da[i] + l3_m2_t2_da[i]; }
        for i in 0..12 { l2_m2_da[i] += l2_m2_t3_da[i] + l3_m2_t3_da[i]; }
        for i in 0..20 { l2_m2_da[i] += l2_m2_t5_da[i] + l3_m2_t5_da[i]; }
        for i in 0..28 { l2_m2_da[i] += l2_m2_t7_da[i] + l3_m2_t7_da[i]; }
        for i in 0..40 { l2_m2_da[i] += l2_m2_t10_da[i] + l3_m2_t10_da[i]; }

        for i in 0..4 { l2_m2_dvp[i] += l3_m2_t1_dvp[i]; }
        for i in 0..8 { l2_m2_dvp[i] += l3_m2_t2_dvp[i]; }
        for i in 0..12 { l2_m2_dvp[i] += l3_m2_t3_dvp[i]; }
        for i in 0..20 { l2_m2_dvp[i] += l3_m2_t5_dvp[i]; }
        for i in 0..28 { l2_m2_dvp[i] += l3_m2_t7_dvp[i]; }
        for i in 0..40 { l2_m2_dvp[i] += l3_m2_t10_dvp[i]; }

        for i in 0..40 {
            let tmp = l2_m2_a[i].backward(l2_m2_da[i]);
            l1_m2_db[i] += tmp.0;
            l1_m2_dvr += tmp.1;
            let tmp = l2_m2_vp[i].backward(l2_m2_dvp[i]);
            l1_m2_db[i] += tmp.0;
            l1_m2_dvr += tmp.1;
        }
        
        // 3.3.4. Layer 1
        for i in 0..4 { l1_m2_db[i] += l2_m2_t1_db[i] + l3_m2_t1_db[i]; }
        for i in 0..8 { l1_m2_db[i] += l2_m2_t2_db[i] + l3_m2_t2_db[i]; }
        for i in 0..12 { l1_m2_db[i] += l2_m2_t3_db[i] + l3_m2_t3_db[i]; }
        for i in 0..20 { l1_m2_db[i] += l2_m2_t5_db[i] + l3_m2_t5_db[i]; }
        for i in 0..28 { l1_m2_db[i] += l2_m2_t7_db[i] + l3_m2_t7_db[i]; }
        for i in 0..40 { l1_m2_db[i] += l2_m2_t10_db[i] + l3_m2_t10_db[i]; }
        
        for i in 0..40 {
            dalpha += l1_m2_b[i].backward(l1_m2_db[i]);
        }
        let tmp = l1_m2_vr.backward(l1_m2_dvr);
        dalpha += tmp.0;
        dsigma1 += tmp.1;
        dsigma2 += tmp.2;
        dsigma3 += tmp.3;
        dsigma5 += tmp.4;
        dsigma7 += tmp.5;
        dsigma10 += tmp.6;

        // 3.4. Option Maturity 3
        // 3.4.1. Layer 4
        let (l3_m3_t1_da, l3_m3_t1_db, l3_m3_t1_dvp, l3_m3_t1_drstar) = l4_m3_t1_pswaption.backward(l4_dpswaption[2][0]);
        let (l3_m3_t2_da, l3_m3_t2_db, l3_m3_t2_dvp, l3_m3_t2_drstar) = l4_m3_t2_pswaption.backward(l4_dpswaption[2][1]);
        let (l3_m3_t3_da, l3_m3_t3_db, l3_m3_t3_dvp, l3_m3_t3_drstar) = l4_m3_t3_pswaption.backward(l4_dpswaption[2][2]);
        let (l3_m3_t5_da, l3_m3_t5_db, l3_m3_t5_dvp, l3_m3_t5_drstar) = l4_m3_t5_pswaption.backward(l4_dpswaption[2][3]);
        let (l3_m3_t7_da, l3_m3_t7_db, l3_m3_t7_dvp, l3_m3_t7_drstar) = l4_m3_t7_pswaption.backward(l4_dpswaption[2][4]);
        let (l3_m3_t10_da, l3_m3_t10_db, l3_m3_t10_dvp, l3_m3_t10_drstar) = l4_m3_t10_pswaption.backward(l4_dpswaption[2][5]);
        
        // 3.4.2. Layer 3
        let (l2_m3_t1_da, l2_m3_t1_db) = l3_m3_t1_rstar.backward(l3_m3_t1_drstar);
        let (l2_m3_t2_da, l2_m3_t2_db) = l3_m3_t2_rstar.backward(l3_m3_t2_drstar);
        let (l2_m3_t3_da, l2_m3_t3_db) = l3_m3_t3_rstar.backward(l3_m3_t3_drstar);
        let (l2_m3_t5_da, l2_m3_t5_db) = l3_m3_t5_rstar.backward(l3_m3_t5_drstar);
        let (l2_m3_t7_da, l2_m3_t7_db) = l3_m3_t7_rstar.backward(l3_m3_t7_drstar);
        let (l2_m3_t10_da, l2_m3_t10_db) = l3_m3_t10_rstar.backward(l3_m3_t10_drstar);

        // 3.4.3. Layer 2
        let mut l2_m3_da = [0.0; 40];
        let mut l2_m3_dvp = [0.0; 40];
        let mut l1_m3_db = [0.0; 40];
        let mut l1_m3_dvr = 0.0;

        for i in 0..4 { l2_m3_da[i] += l2_m3_t1_da[i] + l3_m3_t1_da[i]; }
        for i in 0..8 { l2_m3_da[i] += l2_m3_t2_da[i] + l3_m3_t2_da[i]; }
        for i in 0..12 { l2_m3_da[i] += l2_m3_t3_da[i] + l3_m3_t3_da[i]; }
        for i in 0..20 { l2_m3_da[i] += l2_m3_t5_da[i] + l3_m3_t5_da[i]; }
        for i in 0..28 { l2_m3_da[i] += l2_m3_t7_da[i] + l3_m3_t7_da[i]; }
        for i in 0..40 { l2_m3_da[i] += l2_m3_t10_da[i] + l3_m3_t10_da[i]; }

        for i in 0..4 { l2_m3_dvp[i] += l3_m3_t1_dvp[i]; }
        for i in 0..8 { l2_m3_dvp[i] += l3_m3_t2_dvp[i]; }
        for i in 0..12 { l2_m3_dvp[i] += l3_m3_t3_dvp[i]; }
        for i in 0..20 { l2_m3_dvp[i] += l3_m3_t5_dvp[i]; }
        for i in 0..28 { l2_m3_dvp[i] += l3_m3_t7_dvp[i]; }
        for i in 0..40 { l2_m3_dvp[i] += l3_m3_t10_dvp[i]; }

        for i in 0..40 {
            let tmp = l2_m3_a[i].backward(l2_m3_da[i]);
            l1_m3_db[i] += tmp.0;
            l1_m3_dvr += tmp.1;
            let tmp = l2_m3_vp[i].backward(l2_m3_dvp[i]);
            l1_m3_db[i] += tmp.0;
            l1_m3_dvr += tmp.1;
        }
        
        // 3.4.4. Layer 1
        for i in 0..4 { l1_m3_db[i] += l2_m3_t1_db[i] + l3_m3_t1_db[i]; }
        for i in 0..8 { l1_m3_db[i] += l2_m3_t2_db[i] + l3_m3_t2_db[i]; }
        for i in 0..12 { l1_m3_db[i] += l2_m3_t3_db[i] + l3_m3_t3_db[i]; }
        for i in 0..20 { l1_m3_db[i] += l2_m3_t5_db[i] + l3_m3_t5_db[i]; }
        for i in 0..28 { l1_m3_db[i] += l2_m3_t7_db[i] + l3_m3_t7_db[i]; }
        for i in 0..40 { l1_m3_db[i] += l2_m3_t10_db[i] + l3_m3_t10_db[i]; }
        
        for i in 0..40 {
            dalpha += l1_m3_b[i].backward(l1_m3_db[i]);
        }
        let tmp = l1_m3_vr.backward(l1_m3_dvr);
        dalpha += tmp.0;
        dsigma1 += tmp.1;
        dsigma2 += tmp.2;
        dsigma3 += tmp.3;
        dsigma5 += tmp.4;
        dsigma7 += tmp.5;
        dsigma10 += tmp.6;

        // 3.5. Option Maturity 5
        // 3.5.1. Layer 4
        let (l3_m5_t1_da, l3_m5_t1_db, l3_m5_t1_dvp, l3_m5_t1_drstar) = l4_m5_t1_pswaption.backward(l4_dpswaption[3][0]);
        let (l3_m5_t2_da, l3_m5_t2_db, l3_m5_t2_dvp, l3_m5_t2_drstar) = l4_m5_t2_pswaption.backward(l4_dpswaption[3][1]);
        let (l3_m5_t3_da, l3_m5_t3_db, l3_m5_t3_dvp, l3_m5_t3_drstar) = l4_m5_t3_pswaption.backward(l4_dpswaption[3][2]);
        let (l3_m5_t5_da, l3_m5_t5_db, l3_m5_t5_dvp, l3_m5_t5_drstar) = l4_m5_t5_pswaption.backward(l4_dpswaption[3][3]);
        let (l3_m5_t7_da, l3_m5_t7_db, l3_m5_t7_dvp, l3_m5_t7_drstar) = l4_m5_t7_pswaption.backward(l4_dpswaption[3][4]);
        let (l3_m5_t10_da, l3_m5_t10_db, l3_m5_t10_dvp, l3_m5_t10_drstar) = l4_m5_t10_pswaption.backward(l4_dpswaption[3][5]);
        
        // 3.5.2. Layer 3
        let (l2_m5_t1_da, l2_m5_t1_db) = l3_m5_t1_rstar.backward(l3_m5_t1_drstar);
        let (l2_m5_t2_da, l2_m5_t2_db) = l3_m5_t2_rstar.backward(l3_m5_t2_drstar);
        let (l2_m5_t3_da, l2_m5_t3_db) = l3_m5_t3_rstar.backward(l3_m5_t3_drstar);
        let (l2_m5_t5_da, l2_m5_t5_db) = l3_m5_t5_rstar.backward(l3_m5_t5_drstar);
        let (l2_m5_t7_da, l2_m5_t7_db) = l3_m5_t7_rstar.backward(l3_m5_t7_drstar);
        let (l2_m5_t10_da, l2_m5_t10_db) = l3_m5_t10_rstar.backward(l3_m5_t10_drstar);

        // 3.5.3. Layer 2
        let mut l2_m5_da = [0.0; 40];
        let mut l2_m5_dvp = [0.0; 40];
        let mut l1_m5_db = [0.0; 40];
        let mut l1_m5_dvr = 0.0;

        for i in 0..4 { l2_m5_da[i] += l2_m5_t1_da[i] + l3_m5_t1_da[i]; }
        for i in 0..8 { l2_m5_da[i] += l2_m5_t2_da[i] + l3_m5_t2_da[i]; }
        for i in 0..12 { l2_m5_da[i] += l2_m5_t3_da[i] + l3_m5_t3_da[i]; }
        for i in 0..20 { l2_m5_da[i] += l2_m5_t5_da[i] + l3_m5_t5_da[i]; }
        for i in 0..28 { l2_m5_da[i] += l2_m5_t7_da[i] + l3_m5_t7_da[i]; }
        for i in 0..40 { l2_m5_da[i] += l2_m5_t10_da[i] + l3_m5_t10_da[i]; }

        for i in 0..4 { l2_m5_dvp[i] += l3_m5_t1_dvp[i]; }
        for i in 0..8 { l2_m5_dvp[i] += l3_m5_t2_dvp[i]; }
        for i in 0..12 { l2_m5_dvp[i] += l3_m5_t3_dvp[i]; }
        for i in 0..20 { l2_m5_dvp[i] += l3_m5_t5_dvp[i]; }
        for i in 0..28 { l2_m5_dvp[i] += l3_m5_t7_dvp[i]; }
        for i in 0..40 { l2_m5_dvp[i] += l3_m5_t10_dvp[i]; }

        for i in 0..40 {
            let tmp = l2_m5_a[i].backward(l2_m5_da[i]);
            l1_m5_db[i] += tmp.0;
            l1_m5_dvr += tmp.1;
            let tmp = l2_m5_vp[i].backward(l2_m5_dvp[i]);
            l1_m5_db[i] += tmp.0;
            l1_m5_dvr += tmp.1;
        }
        
        // 3.5.4. Layer 1
        for i in 0..4 { l1_m5_db[i] += l2_m5_t1_db[i] + l3_m5_t1_db[i]; }
        for i in 0..8 { l1_m5_db[i] += l2_m5_t2_db[i] + l3_m5_t2_db[i]; }
        for i in 0..12 { l1_m5_db[i] += l2_m5_t3_db[i] + l3_m5_t3_db[i]; }
        for i in 0..20 { l1_m5_db[i] += l2_m5_t5_db[i] + l3_m5_t5_db[i]; }
        for i in 0..28 { l1_m5_db[i] += l2_m5_t7_db[i] + l3_m5_t7_db[i]; }
        for i in 0..40 { l1_m5_db[i] += l2_m5_t10_db[i] + l3_m5_t10_db[i]; }
        
        for i in 0..40 {
            dalpha += l1_m5_b[i].backward(l1_m5_db[i]);
        }
        let tmp = l1_m5_vr.backward(l1_m5_dvr);
        dalpha += tmp.0;
        dsigma1 += tmp.1;
        dsigma2 += tmp.2;
        dsigma3 += tmp.3;
        dsigma5 += tmp.4;
        dsigma7 += tmp.5;
        dsigma10 += tmp.6;

        // 3.6. Option Maturity 7
        // 3.6.1. Layer 4
        let (l3_m7_t1_da, l3_m7_t1_db, l3_m7_t1_dvp, l3_m7_t1_drstar) = l4_m7_t1_pswaption.backward(l4_dpswaption[4][0]);
        let (l3_m7_t2_da, l3_m7_t2_db, l3_m7_t2_dvp, l3_m7_t2_drstar) = l4_m7_t2_pswaption.backward(l4_dpswaption[4][1]);
        let (l3_m7_t3_da, l3_m7_t3_db, l3_m7_t3_dvp, l3_m7_t3_drstar) = l4_m7_t3_pswaption.backward(l4_dpswaption[4][2]);
        let (l3_m7_t5_da, l3_m7_t5_db, l3_m7_t5_dvp, l3_m7_t5_drstar) = l4_m7_t5_pswaption.backward(l4_dpswaption[4][3]);
        let (l3_m7_t7_da, l3_m7_t7_db, l3_m7_t7_dvp, l3_m7_t7_drstar) = l4_m7_t7_pswaption.backward(l4_dpswaption[4][4]);
        let (l3_m7_t10_da, l3_m7_t10_db, l3_m7_t10_dvp, l3_m7_t10_drstar) = l4_m7_t10_pswaption.backward(l4_dpswaption[4][5]);
        
        // 3.6.2. Layer 3
        let (l2_m7_t1_da, l2_m7_t1_db) = l3_m7_t1_rstar.backward(l3_m7_t1_drstar);
        let (l2_m7_t2_da, l2_m7_t2_db) = l3_m7_t2_rstar.backward(l3_m7_t2_drstar);
        let (l2_m7_t3_da, l2_m7_t3_db) = l3_m7_t3_rstar.backward(l3_m7_t3_drstar);
        let (l2_m7_t5_da, l2_m7_t5_db) = l3_m7_t5_rstar.backward(l3_m7_t5_drstar);
        let (l2_m7_t7_da, l2_m7_t7_db) = l3_m7_t7_rstar.backward(l3_m7_t7_drstar);
        let (l2_m7_t10_da, l2_m7_t10_db) = l3_m7_t10_rstar.backward(l3_m7_t10_drstar);

        // 3.6.3. Layer 2
        let mut l2_m7_da = [0.0; 40];
        let mut l2_m7_dvp = [0.0; 40];
        let mut l1_m7_db = [0.0; 40];
        let mut l1_m7_dvr = 0.0;

        for i in 0..4 { l2_m7_da[i] += l2_m7_t1_da[i] + l3_m7_t1_da[i]; }
        for i in 0..8 { l2_m7_da[i] += l2_m7_t2_da[i] + l3_m7_t2_da[i]; }
        for i in 0..12 { l2_m7_da[i] += l2_m7_t3_da[i] + l3_m7_t3_da[i]; }
        for i in 0..20 { l2_m7_da[i] += l2_m7_t5_da[i] + l3_m7_t5_da[i]; }
        for i in 0..28 { l2_m7_da[i] += l2_m7_t7_da[i] + l3_m7_t7_da[i]; }
        for i in 0..40 { l2_m7_da[i] += l2_m7_t10_da[i] + l3_m7_t10_da[i]; }

        for i in 0..4 { l2_m7_dvp[i] += l3_m7_t1_dvp[i]; }
        for i in 0..8 { l2_m7_dvp[i] += l3_m7_t2_dvp[i]; }
        for i in 0..12 { l2_m7_dvp[i] += l3_m7_t3_dvp[i]; }
        for i in 0..20 { l2_m7_dvp[i] += l3_m7_t5_dvp[i]; }
        for i in 0..28 { l2_m7_dvp[i] += l3_m7_t7_dvp[i]; }
        for i in 0..40 { l2_m7_dvp[i] += l3_m7_t10_dvp[i]; }

        for i in 0..40 {
            let tmp = l2_m7_a[i].backward(l2_m7_da[i]);
            l1_m7_db[i] += tmp.0;
            l1_m7_dvr += tmp.1;
            let tmp = l2_m7_vp[i].backward(l2_m7_dvp[i]);
            l1_m7_db[i] += tmp.0;
            l1_m7_dvr += tmp.1;
        }
        
        // 3.6.4. Layer 1
        for i in 0..4 { l1_m7_db[i] += l2_m7_t1_db[i] + l3_m7_t1_db[i]; }
        for i in 0..8 { l1_m7_db[i] += l2_m7_t2_db[i] + l3_m7_t2_db[i]; }
        for i in 0..12 { l1_m7_db[i] += l2_m7_t3_db[i] + l3_m7_t3_db[i]; }
        for i in 0..20 { l1_m7_db[i] += l2_m7_t5_db[i] + l3_m7_t5_db[i]; }
        for i in 0..28 { l1_m7_db[i] += l2_m7_t7_db[i] + l3_m7_t7_db[i]; }
        for i in 0..40 { l1_m7_db[i] += l2_m7_t10_db[i] + l3_m7_t10_db[i]; }
        
        for i in 0..40 {
            dalpha += l1_m7_b[i].backward(l1_m7_db[i]);
        }
        let tmp = l1_m7_vr.backward(l1_m7_dvr);
        dalpha += tmp.0;
        dsigma1 += tmp.1;
        dsigma2 += tmp.2;
        dsigma3 += tmp.3;
        dsigma5 += tmp.4;
        dsigma7 += tmp.5;
        dsigma10 += tmp.6;

        // 3.7. Option Maturity 10
        // 3.7.1. Layer 4
        let (l3_m10_t1_da, l3_m10_t1_db, l3_m10_t1_dvp, l3_m10_t1_drstar) = l4_m10_t1_pswaption.backward(l4_dpswaption[5][0]);
        let (l3_m10_t2_da, l3_m10_t2_db, l3_m10_t2_dvp, l3_m10_t2_drstar) = l4_m10_t2_pswaption.backward(l4_dpswaption[5][1]);
        let (l3_m10_t3_da, l3_m10_t3_db, l3_m10_t3_dvp, l3_m10_t3_drstar) = l4_m10_t3_pswaption.backward(l4_dpswaption[5][2]);
        let (l3_m10_t5_da, l3_m10_t5_db, l3_m10_t5_dvp, l3_m10_t5_drstar) = l4_m10_t5_pswaption.backward(l4_dpswaption[5][3]);
        let (l3_m10_t7_da, l3_m10_t7_db, l3_m10_t7_dvp, l3_m10_t7_drstar) = l4_m10_t7_pswaption.backward(l4_dpswaption[5][4]);
        let (l3_m10_t10_da, l3_m10_t10_db, l3_m10_t10_dvp, l3_m10_t10_drstar) = l4_m10_t10_pswaption.backward(l4_dpswaption[5][5]);
        
        // 3.7.2. Layer 3
        let (l2_m10_t1_da, l2_m10_t1_db) = l3_m10_t1_rstar.backward(l3_m10_t1_drstar);
        let (l2_m10_t2_da, l2_m10_t2_db) = l3_m10_t2_rstar.backward(l3_m10_t2_drstar);
        let (l2_m10_t3_da, l2_m10_t3_db) = l3_m10_t3_rstar.backward(l3_m10_t3_drstar);
        let (l2_m10_t5_da, l2_m10_t5_db) = l3_m10_t5_rstar.backward(l3_m10_t5_drstar);
        let (l2_m10_t7_da, l2_m10_t7_db) = l3_m10_t7_rstar.backward(l3_m10_t7_drstar);
        let (l2_m10_t10_da, l2_m10_t10_db) = l3_m10_t10_rstar.backward(l3_m10_t10_drstar);

        // 3.7.3. Layer 2
        let mut l2_m10_da = [0.0; 40];
        let mut l2_m10_dvp = [0.0; 40];
        let mut l1_m10_db = [0.0; 40];
        let mut l1_m10_dvr = 0.0;

        for i in 0..4 { l2_m10_da[i] += l2_m10_t1_da[i] + l3_m10_t1_da[i]; }
        for i in 0..8 { l2_m10_da[i] += l2_m10_t2_da[i] + l3_m10_t2_da[i]; }
        for i in 0..12 { l2_m10_da[i] += l2_m10_t3_da[i] + l3_m10_t3_da[i]; }
        for i in 0..20 { l2_m10_da[i] += l2_m10_t5_da[i] + l3_m10_t5_da[i]; }
        for i in 0..28 { l2_m10_da[i] += l2_m10_t7_da[i] + l3_m10_t7_da[i]; }
        for i in 0..40 { l2_m10_da[i] += l2_m10_t10_da[i] + l3_m10_t10_da[i]; }

        for i in 0..4 { l2_m10_dvp[i] += l3_m10_t1_dvp[i]; }
        for i in 0..8 { l2_m10_dvp[i] += l3_m10_t2_dvp[i]; }
        for i in 0..12 { l2_m10_dvp[i] += l3_m10_t3_dvp[i]; }
        for i in 0..20 { l2_m10_dvp[i] += l3_m10_t5_dvp[i]; }
        for i in 0..28 { l2_m10_dvp[i] += l3_m10_t7_dvp[i]; }
        for i in 0..40 { l2_m10_dvp[i] += l3_m10_t10_dvp[i]; }

        for i in 0..40 {
            let tmp = l2_m10_a[i].backward(l2_m10_da[i]);
            l1_m10_db[i] += tmp.0;
            l1_m10_dvr += tmp.1;
            let tmp = l2_m10_vp[i].backward(l2_m10_dvp[i]);
            l1_m10_db[i] += tmp.0;
            l1_m10_dvr += tmp.1;
        }
        
        // 3.7.4. Layer 1
        for i in 0..4 { l1_m10_db[i] += l2_m10_t1_db[i] + l3_m10_t1_db[i]; }
        for i in 0..8 { l1_m10_db[i] += l2_m10_t2_db[i] + l3_m10_t2_db[i]; }
        for i in 0..12 { l1_m10_db[i] += l2_m10_t3_db[i] + l3_m10_t3_db[i]; }
        for i in 0..20 { l1_m10_db[i] += l2_m10_t5_db[i] + l3_m10_t5_db[i]; }
        for i in 0..28 { l1_m10_db[i] += l2_m10_t7_db[i] + l3_m10_t7_db[i]; }
        for i in 0..40 { l1_m10_db[i] += l2_m10_t10_db[i] + l3_m10_t10_db[i]; }
        
        for i in 0..40 {
            dalpha += l1_m10_b[i].backward(l1_m10_db[i]);
        }
        let tmp = l1_m10_vr.backward(l1_m10_dvr);
        dalpha += tmp.0;
        dsigma1 += tmp.1;
        dsigma2 += tmp.2;
        dsigma3 += tmp.3;
        dsigma5 += tmp.4;
        dsigma7 += tmp.5;
        dsigma10 += tmp.6;

        // 3.8. Update
        alpha -= dalpha*lr;
        alpha = alpha.max(0.0001);
        sigma1 -= dsigma1*lr;
        sigma2 -= dsigma2*lr;
        sigma3 -= dsigma3*lr;
        sigma5 -= dsigma5*lr;
        sigma7 -= dsigma7*lr;
        sigma10 -= dsigma10*lr;

        print!("|grad f(α, σ)| : {:?}, ", (dalpha*dalpha + dsigma1*dsigma1 + dsigma2*dsigma2 + dsigma3*dsigma3 + dsigma5*dsigma5 + dsigma7*dsigma7 + dsigma10*dsigma10).sqrt());
        println!("Parameter : {:?}", (alpha, sigma1, sigma2, sigma3, sigma5, sigma7, sigma10));
        // println!("Gradient : {:?}", (dalpha, dsigma1, dsigma2, dsigma3, dsigma5, dsigma7, dsigma10));
    }
}